Feature Concentration;Architectural Smell;Unutilized Abstraction;Design Smell;545
Feature Concentration;Architectural Smell;The diamond operator (<>) should be used;Code Smell;113
Broken Hierarchy;Design Smell;Unutilized Abstraction;Design Smell;110
Broken Hierarchy;Design Smell;Feature Concentration;Architectural Smell;104
Feature Concentration;Architectural Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;95
Feature Concentration;Architectural Smell;Insufficient Modularization;Design Smell;94
Feature Concentration;Architectural Smell;Methods should not have too many parameters;Code Smell;92
Anonymous inner classes containing only one method should become lambdas;Code Smell;Feature Concentration;Architectural Smell;81
Cognitive Complexity of methods should not be too high;Code Smell;Feature Concentration;Architectural Smell;75
Feature Concentration;Architectural Smell;Unnecessary imports should be removed;Code Smell;70
Feature Concentration;Architectural Smell;Source files should not have any duplicated blocks;Code Smell;66
Cognitive Complexity of methods should not be too high;Code Smell;The diamond operator (<>) should be used;Code Smell;53
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;Source files should not have any duplicated blocks;Code Smell;52
Feature Concentration;Architectural Smell;throws declarations should not be superfluous;Code Smell;51
Anonymous inner classes containing only one method should become lambdas;Code Smell;The diamond operator (<>) should be used;Code Smell;50
Cognitive Complexity of methods should not be too high;Code Smell;Methods should not have too many parameters;Code Smell;48
Methods should not have too many parameters;Code Smell;The diamond operator (<>) should be used;Code Smell;47
Cognitive Complexity of methods should not be too high;Code Smell;Insufficient Modularization;Design Smell;46
Cognitive Complexity of methods should not be too high;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;44
Deficient Encapsulation;Design Smell;Feature Concentration;Architectural Smell;44
Insufficient Modularization;Design Smell;The diamond operator (<>) should be used;Code Smell;44
Insufficient Modularization;Design Smell;Methods should not have too many parameters;Code Smell;43
Anonymous inner classes containing only one method should become lambdas;Code Smell;Methods should not have too many parameters;Code Smell;37
The diamond operator (<>) should be used;Code Smell;Unutilized Abstraction;Design Smell;34
Insufficient Modularization;Design Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;34
Anonymous inner classes containing only one method should become lambdas;Code Smell;Insufficient Modularization;Design Smell;33
Methods should not have too many parameters;Code Smell;Source files should not have any duplicated blocks;Code Smell;32
Insufficient Modularization;Design Smell;Unutilized Abstraction;Design Smell;32
Anonymous inner classes containing only one method should become lambdas;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;31
Methods should not have too many parameters;Code Smell;throws declarations should not be superfluous;Code Smell;31
The diamond operator (<>) should be used;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;31
Feature Concentration;Architectural Smell;Track uses of TODO tags;Code Smell;29
Unnecessary imports should be removed;Code Smell;Unutilized Abstraction;Design Smell;29
@Deprecated code should not be used;Code Smell;Feature Concentration;Architectural Smell;29
Feature Concentration;Architectural Smell;Generic exceptions should never be thrown;Code Smell;28
The diamond operator (<>) should be used;Code Smell;throws declarations should not be superfluous;Code Smell;27
The diamond operator (<>) should be used;Code Smell;Unnecessary imports should be removed;Code Smell;27
Cognitive Complexity of methods should not be too high;Code Smell;Source files should not have any duplicated blocks;Code Smell;26
Feature Concentration;Architectural Smell;Java 8 features should be preferred to Guava;Code Smell;24
Insufficient Modularization;Design Smell;Source files should not have any duplicated blocks;Code Smell;24
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;Unnecessary imports should be removed;Code Smell;24
@Deprecated code should not be used;Code Smell;Methods should not have too many parameters;Code Smell;24
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;The diamond operator (<>) should be used;Code Smell;23
Methods should not have too many parameters;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;23
Anonymous inner classes containing only one method should become lambdas;Code Smell;Unnecessary imports should be removed;Code Smell;22
Anonymous inner classes containing only one method should become lambdas;Code Smell;throws declarations should not be superfluous;Code Smell;22
The diamond operator (<>) should be used;Code Smell;Track uses of TODO tags;Code Smell;21
Feature Concentration;Architectural Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;21
Feature Concentration;Architectural Smell;String literals should not be duplicated;Code Smell;21
Generic exceptions should never be thrown;Code Smell;The diamond operator (<>) should be used;Code Smell;21
Cognitive Complexity of methods should not be too high;Code Smell;Track uses of TODO tags;Code Smell;20
Cognitive Complexity of methods should not be too high;Code Smell;Unnecessary imports should be removed;Code Smell;20
Source files should not have any duplicated blocks;Code Smell;Unutilized Abstraction;Design Smell;20
Catches should be combined;Code Smell;Feature Concentration;Architectural Smell;20
Feature Concentration;Architectural Smell;Unused method parameters should be removed;Code Smell;19
Methods should not have too many parameters;Code Smell;Unutilized Abstraction;Design Smell;19
@Deprecated code should not be used;Code Smell;throws declarations should not be superfluous;Code Smell;18
Cognitive Complexity of methods should not be too high;Code Smell;Unutilized Abstraction;Design Smell;17
String literals should not be duplicated;Code Smell;The diamond operator (<>) should be used;Code Smell;17
Catches should be combined;Code Smell;The diamond operator (<>) should be used;Code Smell;17
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;Unutilized Abstraction;Design Smell;17
The diamond operator (<>) should be used;Code Smell;Unused method parameters should be removed;Code Smell;17
Broken Hierarchy;Design Smell;Methods should not have too many parameters;Code Smell;17
Methods should not have too many parameters;Code Smell;Track uses of TODO tags;Code Smell;17
Methods should not have too many parameters;Code Smell;Unnecessary imports should be removed;Code Smell;17
Broken Hierarchy;Design Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;17
Cognitive Complexity of methods should not be too high;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;17
Anonymous inner classes containing only one method should become lambdas;Code Smell;Unutilized Abstraction;Design Smell;17
Feature Concentration;Architectural Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;16
Feature Concentration;Architectural Smell;Unused private fields should be removed;Code Smell;16
Anonymous inner classes containing only one method should become lambdas;Code Smell;Track uses of TODO tags;Code Smell;16
Feature Concentration;Architectural Smell;Sections of code should not be commented out;Code Smell;16
Java 8 features should be preferred to Guava;Code Smell;The diamond operator (<>) should be used;Code Smell;16
Source files should not have any duplicated blocks;Code Smell;Unnecessary imports should be removed;Code Smell;15
Insufficient Modularization;Design Smell;Track uses of TODO tags;Code Smell;15
Source files should not have any duplicated blocks;Code Smell;The diamond operator (<>) should be used;Code Smell;15
Anonymous inner classes containing only one method should become lambdas;Code Smell;Generic exceptions should never be thrown;Code Smell;14
Loops should not contain more than a single break or continue statement;Code Smell;The diamond operator (<>) should be used;Code Smell;14
Feature Concentration;Architectural Smell;Preconditions and logging arguments should not require evaluation;Code Smell;14
Broken Hierarchy;Design Smell;Unnecessary imports should be removed;Code Smell;14
Anonymous inner classes containing only one method should become lambdas;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;14
Local variables should not be declared and then immediately returned or thrown;Code Smell;The diamond operator (<>) should be used;Code Smell;14
Cognitive Complexity of methods should not be too high;Code Smell;throws declarations should not be superfluous;Code Smell;14
Catches should be combined;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;13
Feature Concentration;Architectural Smell;Printf-style format strings should be used correctly;Code Smell;13
Anonymous inner classes containing only one method should become lambdas;Code Smell;Deficient Encapsulation;Design Smell;13
Unutilized Abstraction;Design Smell;throws declarations should not be superfluous;Code Smell;13
Cognitive Complexity of methods should not be too high;Code Smell;String literals should not be duplicated;Code Smell;13
Anonymous inner classes containing only one method should become lambdas;Code Smell;Java 8 features should be preferred to Guava;Code Smell;13
Cognitive Complexity of methods should not be too high;Code Smell;Generic exceptions should never be thrown;Code Smell;13
Boxed Boolean should be avoided in boolean expressions;Code Smell;Feature Concentration;Architectural Smell;13
Catches should be combined;Code Smell;Methods should not have too many parameters;Code Smell;13
Insufficient Modularization;Design Smell;String literals should not be duplicated;Code Smell;13
Preconditions and logging arguments should not require evaluation;Code Smell;The diamond operator (<>) should be used;Code Smell;13
@Deprecated code should not be used;Code Smell;Anonymous inner classes containing only one method should become lambdas;Code Smell;13
Cognitive Complexity of methods should not be too high;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;13
@Deprecated code should not be used;Code Smell;The diamond operator (<>) should be used;Code Smell;13
Feature Concentration;Architectural Smell;Utility classes should not have public constructors;Code Smell;13
Methods should not have too many parameters;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;13
Generic exceptions should never be thrown;Code Smell;Methods should not have too many parameters;Code Smell;13
Insufficient Modularization;Design Smell;Unnecessary imports should be removed;Code Smell;12
Collection.isEmpty() should be used to test for emptiness;Code Smell;The diamond operator (<>) should be used;Code Smell;12
Deficient Encapsulation;Design Smell;The diamond operator (<>) should be used;Code Smell;12
Methods should not have too many parameters;Code Smell;String literals should not be duplicated;Code Smell;12
Feature Concentration;Architectural Smell;Subclasses that add fields should override equals;Code Smell;12
Child class fields should not shadow parent class fields;Code Smell;Feature Concentration;Architectural Smell;12
Anonymous inner classes containing only one method should become lambdas;Code Smell;Null pointers should not be dereferenced;Code Smell;11
Broken Hierarchy;Design Smell;Cognitive Complexity of methods should not be too high;Code Smell;11
Anonymous inner classes containing only one method should become lambdas;Code Smell;Unused method parameters should be removed;Code Smell;11
Null pointers should not be dereferenced;Code Smell;The diamond operator (<>) should be used;Code Smell;11
Cognitive Complexity of methods should not be too high;Code Smell;Deficient Encapsulation;Design Smell;11
Cognitive Complexity of methods should not be too high;Code Smell;Null pointers should not be dereferenced;Code Smell;11
Preconditions and logging arguments should not require evaluation;Code Smell;Printf-style format strings should be used correctly;Code Smell;11
Cyclically-dependent Modularization;Design Smell;Feature Concentration;Architectural Smell;11
Anonymous inner classes containing only one method should become lambdas;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;11
Cognitive Complexity of methods should not be too high;Code Smell;Collapsible if statements should be merged;Code Smell;11
Insufficient Modularization;Design Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;11
Feature Concentration;Architectural Smell;Null pointers should not be dereferenced;Code Smell;11
Catches should be combined;Code Smell;Generic exceptions should never be thrown;Code Smell;11
Java 8 features should be preferred to Guava;Code Smell;Methods should not have too many parameters;Code Smell;11
Cognitive Complexity of methods should not be too high;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;11
Anonymous inner classes containing only one method should become lambdas;Code Smell;String literals should not be duplicated;Code Smell;11
Methods should not have too many parameters;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;10
Insufficient Modularization;Design Smell;Java 8 features should be preferred to Guava;Code Smell;10
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;Track uses of TODO tags;Code Smell;10
Methods should not be empty;Code Smell;The diamond operator (<>) should be used;Code Smell;10
Cognitive Complexity of methods should not be too high;Code Smell;Unused method parameters should be removed;Code Smell;10
Track uses of TODO tags;Code Smell;throws declarations should not be superfluous;Code Smell;10
Methods should not have too many parameters;Code Smell;Unused method parameters should be removed;Code Smell;10
Feature Concentration;Architectural Smell;Methods should not be empty;Code Smell;10
Anonymous inner classes containing only one method should become lambdas;Code Smell;Source files should not have any duplicated blocks;Code Smell;10
Map.get and value test should be replaced with single method call;Code Smell;The diamond operator (<>) should be used;Code Smell;10
Cognitive Complexity of methods should not be too high;Code Smell;Java 8 features should be preferred to Guava;Code Smell;10
Anonymous inner classes containing only one method should become lambdas;Code Smell;Catches should be combined;Code Smell;10
Deficient Encapsulation;Design Smell;Insufficient Modularization;Design Smell;10
Boxed Boolean should be avoided in boolean expressions;Code Smell;Methods should not have too many parameters;Code Smell;10
Feature Concentration;Architectural Smell;Loops should not contain more than a single break or continue statement;Code Smell;10
Feature Envy;Design Smell;Unutilized Abstraction;Design Smell;10
Anonymous inner classes containing only one method should become lambdas;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;9
Generic exceptions should never be thrown;Code Smell;throws declarations should not be superfluous;Code Smell;9
Deficient Encapsulation;Design Smell;Unnecessary imports should be removed;Code Smell;9
@Deprecated code should not be used;Code Smell;Broken Hierarchy;Design Smell;9
Cognitive Complexity of methods should not be too high;Code Smell;Printf-style format strings should be used correctly;Code Smell;9
@Deprecated code should not be used;Code Smell;Source files should not have any duplicated blocks;Code Smell;9
Fields in a Serializable class should either be transient or serializable;Code Smell;Insufficient Modularization;Design Smell;9
Java 8 features should be preferred to Guava;Code Smell;Unutilized Abstraction;Design Smell;9
Feature Concentration;Architectural Smell;Local variables should not shadow class fields;Code Smell;9
Printf-style format strings should be used correctly;Code Smell;The diamond operator (<>) should be used;Code Smell;9
Boxed Boolean should be avoided in boolean expressions;Code Smell;The diamond operator (<>) should be used;Code Smell;9
The diamond operator (<>) should be used;Code Smell;Utility classes should not have public constructors;Code Smell;9
Generic exceptions should never be thrown;Code Smell;Unutilized Abstraction;Design Smell;8
Catches should be combined;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;8
Source files should not have any duplicated blocks;Code Smell;throws declarations should not be superfluous;Code Smell;8
Anonymous inner classes containing only one method should become lambdas;Code Smell;Boxed Boolean should be avoided in boolean expressions;Code Smell;8
Collapsible if statements should be merged;Code Smell;The diamond operator (<>) should be used;Code Smell;8
Insufficient Modularization;Design Smell;Loops should not contain more than a single break or continue statement;Code Smell;8
Child class fields should not shadow parent class fields;Code Smell;The diamond operator (<>) should be used;Code Smell;8
Child class fields should not shadow parent class fields;Code Smell;Methods should not have too many parameters;Code Smell;8
Deficient Encapsulation;Design Smell;Unutilized Abstraction;Design Smell;8
Unnecessary imports should be removed;Code Smell;throws declarations should not be superfluous;Code Smell;8
Broken Hierarchy;Design Smell;The diamond operator (<>) should be used;Code Smell;8
Insufficient Modularization;Design Smell;throws declarations should not be superfluous;Code Smell;8
Collection.isEmpty() should be used to test for emptiness;Code Smell;Feature Concentration;Architectural Smell;8
Local variables should not be declared and then immediately returned or thrown;Code Smell;Methods should not be empty;Code Smell;8
Feature Concentration;Architectural Smell;Feature Envy;Design Smell;8
Generic exceptions should never be thrown;Code Smell;Insufficient Modularization;Design Smell;8
Feature Concentration;Architectural Smell;Map.get and value test should be replaced with single method call;Code Smell;8
Deficient Encapsulation;Design Smell;Generic exceptions should never be thrown;Code Smell;8
Insufficient Modularization;Design Smell;Null pointers should not be dereferenced;Code Smell;8
Anonymous inner classes containing only one method should become lambdas;Code Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;8
@Deprecated code should not be used;Code Smell;Insufficient Modularization;Design Smell;8
Anonymous inner classes containing only one method should become lambdas;Code Smell;Unused private fields should be removed;Code Smell;7
Unnecessary imports should be removed;Code Smell;Unused method parameters should be removed;Code Smell;7
Track uses of TODO tags;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;7
Broken Hierarchy;Design Smell;throws declarations should not be superfluous;Code Smell;7
Methods should not have too many parameters;Code Smell;Printf-style format strings should be used correctly;Code Smell;7
Feature Concentration;Architectural Smell;Synchronized classes Vector  Hashtable  Stack and StringBuffer should not be used;Code Smell;7
@Deprecated code should not be used;Code Smell;Boxed Boolean should be avoided in boolean expressions;Code Smell;7
Ternary operators should not be nested;Code Smell;The diamond operator (<>) should be used;Code Smell;7
Boxed Boolean should be avoided in boolean expressions;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;7
Modifiers should be declared in the correct order;Code Smell;The diamond operator (<>) should be used;Code Smell;7
Methods should not have identical implementations;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;7
Catches should be combined;Code Smell;Unnecessary imports should be removed;Code Smell;7
Cognitive Complexity of methods should not be too high;Code Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;7
Sections of code should not be commented out;Code Smell;The diamond operator (<>) should be used;Code Smell;7
Subclasses that add fields should override equals;Code Smell;Unutilized Abstraction;Design Smell;7
Deficient Encapsulation;Design Smell;Methods should not have too many parameters;Code Smell;7
Methods should not have too many parameters;Code Smell;Subclasses that add fields should override equals;Code Smell;7
Loops should not contain more than a single break or continue statement;Code Smell;Methods should not have too many parameters;Code Smell;7
Catches should be combined;Code Smell;Java 8 features should be preferred to Guava;Code Smell;7
Cognitive Complexity of methods should not be too high;Code Smell;Sections of code should not be commented out;Code Smell;7
Catches should be combined;Code Smell;String literals should not be duplicated;Code Smell;7
Anonymous inner classes containing only one method should become lambdas;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;7
Insufficient Modularization;Design Smell;Methods should not have identical implementations;Code Smell;7
Sections of code should not be commented out;Code Smell;Track uses of TODO tags;Code Smell;7
Catches should be combined;Code Smell;Deficient Encapsulation;Design Smell;7
Insufficient Modularization;Design Smell;Preconditions and logging arguments should not require evaluation;Code Smell;6
Null pointers should not be dereferenced;Code Smell;Unused method parameters should be removed;Code Smell;6
Broken Hierarchy;Design Smell;Source files should not have any duplicated blocks;Code Smell;6
Boxed Boolean should be avoided in boolean expressions;Code Smell;Insufficient Modularization;Design Smell;6
Cognitive Complexity of methods should not be too high;Code Smell;Collection.isEmpty() should be used to test for emptiness;Code Smell;6
Insufficient Modularization;Design Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;6
Feature Concentration;Architectural Smell;Type parameter names should comply with a naming convention;Code Smell;6
Generic exceptions should never be thrown;Code Smell;Sections of code should not be commented out;Code Smell;6
Loops should not contain more than a single break or continue statement;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;6
@Deprecated code should not be used;Code Smell;Generic exceptions should never be thrown;Code Smell;6
Methods should not have too many parameters;Code Smell;Unused private fields should be removed;Code Smell;6
Collection.isEmpty() should be used to test for emptiness;Code Smell;Methods should not have too many parameters;Code Smell;6
Child class fields should not shadow parent class fields;Code Smell;throws declarations should not be superfluous;Code Smell;6
Unused method parameters should be removed;Code Smell;throws declarations should not be superfluous;Code Smell;6
Generic exceptions should never be thrown;Code Smell;Unnecessary imports should be removed;Code Smell;6
Source files should not have any duplicated blocks;Code Smell;Track uses of TODO tags;Code Smell;6
@Override should be used on overriding and implementing methods;Code Smell;Feature Concentration;Architectural Smell;6
Java 8 features should be preferred to Guava;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;6
Fields in a Serializable class should either be transient or serializable;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;6
Methods should not have too many parameters;Code Smell;Null pointers should not be dereferenced;Code Smell;6
@Deprecated code should not be used;Code Smell;String literals should not be duplicated;Code Smell;6
@Deprecated code should not be used;Code Smell;Child class fields should not shadow parent class fields;Code Smell;6
Generic exceptions should never be thrown;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;6
Insufficient Modularization;Design Smell;Sections of code should not be commented out;Code Smell;6
String literals should not be duplicated;Code Smell;throws declarations should not be superfluous;Code Smell;6
Java 8 features should be preferred to Guava;Code Smell;Track uses of TODO tags;Code Smell;6
Cyclically-dependent Modularization;Design Smell;Deficient Encapsulation;Design Smell;6
Generic exceptions should never be thrown;Code Smell;Java 8 features should be preferred to Guava;Code Smell;6
Cyclically-dependent Modularization;Design Smell;Track uses of TODO tags;Code Smell;6
Unnecessary imports should be removed;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;6
Java 8 features should be preferred to Guava;Code Smell;Unnecessary imports should be removed;Code Smell;6
@Deprecated code should not be used;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;6
Cyclically-dependent Modularization;Design Smell;The diamond operator (<>) should be used;Code Smell;6
Methods should not have identical implementations;Code Smell;Track uses of TODO tags;Code Smell;6
Insufficient Modularization;Design Smell;Local variables should not shadow class fields;Code Smell;6
Track uses of TODO tags;Code Smell;Unnecessary imports should be removed;Code Smell;6
Insufficient Modularization;Design Smell;Unused method parameters should be removed;Code Smell;6
Method names should comply with a naming convention;Code Smell;The diamond operator (<>) should be used;Code Smell;6
The diamond operator (<>) should be used;Code Smell;Unused private fields should be removed;Code Smell;6
Empty arrays and collections should be returned instead of null;Code Smell;Feature Concentration;Architectural Smell;6
Methods should not be empty;Code Smell;Unutilized Abstraction;Design Smell;6
Dead stores should be removed;Code Smell;The diamond operator (<>) should be used;Code Smell;6
Sections of code should not be commented out;Code Smell;throws declarations should not be superfluous;Code Smell;6
Methods should not have too many parameters;Code Smell;Sections of code should not be commented out;Code Smell;6
Printf-style format strings should be used correctly;Code Smell;throws declarations should not be superfluous;Code Smell;5
Source files should not have any duplicated blocks;Code Smell;String literals should not be duplicated;Code Smell;5
Local variables should not shadow class fields;Code Smell;The diamond operator (<>) should be used;Code Smell;5
Track uses of TODO tags;Code Smell;Unutilized Abstraction;Design Smell;5
Feature Concentration;Architectural Smell;Method names should comply with a naming convention;Code Smell;5
Collection.isEmpty() should be used to test for emptiness;Code Smell;Insufficient Modularization;Design Smell;5
Catches should be combined;Code Smell;throws declarations should not be superfluous;Code Smell;5
Java 8 features should be preferred to Guava;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;5
Boolean literals should not be redundant;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;5
Boxed Boolean should be avoided in boolean expressions;Code Smell;Child class fields should not shadow parent class fields;Code Smell;5
Preconditions and logging arguments should not require evaluation;Code Smell;throws declarations should not be superfluous;Code Smell;5
Boxed Boolean should be avoided in boolean expressions;Code Smell;Unnecessary imports should be removed;Code Smell;5
Collapsible if statements should be merged;Code Smell;Methods should not have too many parameters;Code Smell;5
Feature Concentration;Architectural Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;5
Feature Concentration;Architectural Smell;Resources should be closed;Code Smell;5
Conditionally executed blocks should be reachable;Code Smell;Feature Concentration;Architectural Smell;5
String literals should not be duplicated;Code Smell;Track uses of TODO tags;Code Smell;5
Empty arrays and collections should be returned instead of null;Code Smell;Insufficient Modularization;Design Smell;5
Anonymous inner classes containing only one method should become lambdas;Code Smell;Sections of code should not be commented out;Code Smell;5
Deficient Encapsulation;Design Smell;throws declarations should not be superfluous;Code Smell;5
The diamond operator (<>) should be used;Code Smell;Try-catch blocks should not be nested;Code Smell;5
The diamond operator (<>) should be used;Code Smell;Unused local variables should be removed;Code Smell;5
Catches should be combined;Code Smell;Insufficient Modularization;Design Smell;5
Anonymous inner classes containing only one method should become lambdas;Code Smell;Method names should comply with a naming convention;Code Smell;5
Boxed Boolean should be avoided in boolean expressions;Code Smell;String literals should not be duplicated;Code Smell;5
Cyclically-dependent Modularization;Design Smell;String literals should not be duplicated;Code Smell;5
Collapsible if statements should be merged;Code Smell;Feature Concentration;Architectural Smell;5
Cognitive Complexity of methods should not be too high;Code Smell;Cyclically-dependent Modularization;Design Smell;5
String literals should not be duplicated;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;5
Type parameter names should comply with a naming convention;Code Smell;Unutilized Abstraction;Design Smell;5
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;Synchronized classes Vector  Hashtable  Stack and StringBuffer should not be used;Code Smell;5
Printf-style format strings should be used correctly;Code Smell;Unused method parameters should be removed;Code Smell;5
Cognitive Complexity of methods should not be too high;Code Smell;Methods should not have identical implementations;Code Smell;5
Collapsible if statements should be merged;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;5
Broken Hierarchy;Design Smell;Insufficient Modularization;Design Smell;5
Cognitive Complexity of methods should not be too high;Code Smell;Method names should comply with a naming convention;Code Smell;5
Null pointers should not be dereferenced;Code Smell;throws declarations should not be superfluous;Code Smell;5
Cognitive Complexity of methods should not be too high;Code Smell;Fields in a Serializable class should either be transient or serializable;Code Smell;5
Preconditions and logging arguments should not require evaluation;Code Smell;Unutilized Abstraction;Design Smell;5
Feature Concentration;Architectural Smell;Multifaceted Abstraction;Design Smell;5
Feature Concentration;Architectural Smell;Modifiers should be declared in the correct order;Code Smell;5
Cognitive Complexity of methods should not be too high;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;5
Preconditions and logging arguments should not require evaluation;Code Smell;Unnecessary imports should be removed;Code Smell;5
Cognitive Complexity of methods should not be too high;Code Smell;Utility classes should not have public constructors;Code Smell;5
Child class fields should not shadow parent class fields;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;5
Anonymous inner classes containing only one method should become lambdas;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;5
Conditionally executed blocks should be reachable;Code Smell;The diamond operator (<>) should be used;Code Smell;5
Fields in a Serializable class should either be transient or serializable;Code Smell;The diamond operator (<>) should be used;Code Smell;5
Local variables should not be declared and then immediately returned or thrown;Code Smell;Modifiers should be declared in the correct order;Code Smell;5
Anonymous inner classes containing only one method should become lambdas;Code Smell;Printf-style format strings should be used correctly;Code Smell;5
Child class fields should not shadow parent class fields;Code Smell;Generic exceptions should never be thrown;Code Smell;5
Exceptions should be either logged or rethrown but not both;Code Smell;The diamond operator (<>) should be used;Code Smell;5
Methods should not be empty;Code Smell;Modifiers should be declared in the correct order;Code Smell;5
Cyclically-dependent Modularization;Design Smell;throws declarations should not be superfluous;Code Smell;5
Java 8 features should be preferred to Guava;Code Smell;Printf-style format strings should be used correctly;Code Smell;5
Dead stores should be removed;Code Smell;Insufficient Modularization;Design Smell;5
Method names should comply with a naming convention;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;5
Local variables should not shadow class fields;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;5
Local variables should not be declared and then immediately returned or thrown;Code Smell;Methods should not have too many parameters;Code Smell;5
Feature Concentration;Architectural Smell;Nested blocks of code should not be left empty;Code Smell;5
Unused private fields should be removed;Code Smell;Unutilized Abstraction;Design Smell;5
Preconditions and logging arguments should not require evaluation;Code Smell;Unused method parameters should be removed;Code Smell;5
Local variables should not be declared and then immediately returned or thrown;Code Smell;Unutilized Abstraction;Design Smell;5
Cognitive Complexity of methods should not be too high;Code Smell;Map.get and value test should be replaced with single method call;Code Smell;4
String literals should not be duplicated;Code Smell;Unnecessary imports should be removed;Code Smell;4
Dead stores should be removed;Code Smell;Unused local variables should be removed;Code Smell;4
Child class fields should not shadow parent class fields;Code Smell;String literals should not be duplicated;Code Smell;4
Unutilized Abstraction;Design Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;4
Boolean expressions should not be gratuitous;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;4
Cognitive Complexity of methods should not be too high;Code Smell;Exceptions should be either logged or rethrown but not both;Code Smell;4
Methods should not be empty;Code Smell;Unnecessary imports should be removed;Code Smell;4
Method names should comply with a naming convention;Code Smell;Methods should not have too many parameters;Code Smell;4
Insufficient Modularization;Design Smell;Unused private fields should be removed;Code Smell;4
@Deprecated code should not be used;Code Smell;Track uses of TODO tags;Code Smell;4
Fields in a Serializable class should either be transient or serializable;Code Smell;Methods should not have identical implementations;Code Smell;4
Nested blocks of code should not be left empty;Code Smell;The diamond operator (<>) should be used;Code Smell;4
Insufficient Modularization;Design Smell;Printf-style format strings should be used correctly;Code Smell;4
Null pointers should not be dereferenced;Code Smell;Unnecessary imports should be removed;Code Smell;4
Collection.isEmpty() should be used to test for emptiness;Code Smell;Unused method parameters should be removed;Code Smell;4
Deficient Encapsulation;Design Smell;Utility classes should not have public constructors;Code Smell;4
Cognitive Complexity of methods should not be too high;Code Smell;Nested blocks of code should not be left empty;Code Smell;4
Catches should be combined;Code Smell;Unutilized Abstraction;Design Smell;4
@Override should be used on overriding and implementing methods;Code Smell;Anonymous inner classes containing only one method should become lambdas;Code Smell;4
Deficient Encapsulation;Design Smell;Unused private fields should be removed;Code Smell;4
Method names should comply with a naming convention;Code Smell;Printf-style format strings should be used correctly;Code Smell;4
Boolean literals should not be redundant;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;4
Preconditions and logging arguments should not require evaluation;Code Smell;String literals should not be duplicated;Code Smell;4
Preconditions and logging arguments should not require evaluation;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;4
Generic exceptions should never be thrown;Code Smell;Track uses of TODO tags;Code Smell;4
Local variables should not shadow class fields;Code Smell;Methods should not have too many parameters;Code Smell;4
Empty arrays and collections should be returned instead of null;Code Smell;The diamond operator (<>) should be used;Code Smell;4
Anonymous inner classes containing only one method should become lambdas;Code Smell;Dead stores should be removed;Code Smell;4
Anonymous inner classes containing only one method should become lambdas;Code Smell;Child class fields should not shadow parent class fields;Code Smell;4
Map.get and value test should be replaced with single method call;Code Smell;Methods should not have too many parameters;Code Smell;4
Track uses of TODO tags;Code Smell;Unused method parameters should be removed;Code Smell;4
Feature Concentration;Architectural Smell;Methods should not have identical implementations;Code Smell;4
Broken Hierarchy;Design Smell;Synchronized classes Vector  Hashtable  Stack and StringBuffer should not be used;Code Smell;4
Dead stores should be removed;Code Smell;Feature Concentration;Architectural Smell;4
Java 8 features should be preferred to Guava;Code Smell;throws declarations should not be superfluous;Code Smell;4
Deficient Encapsulation;Design Smell;Track uses of TODO tags;Code Smell;4
Collapsible if statements should be merged;Code Smell;Insufficient Modularization;Design Smell;4
Anonymous inner classes containing only one method should become lambdas;Code Smell;Conditionally executed blocks should be reachable;Code Smell;4
Methods should not have too many parameters;Code Smell;Try-catch blocks should not be nested;Code Smell;4
Feature Concentration;Architectural Smell;Try-catch blocks should not be nested;Code Smell;4
Methods should not be empty;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;4
Boolean literals should not be redundant;Code Smell;Feature Concentration;Architectural Smell;4
Child class fields should not shadow parent class fields;Code Smell;Insufficient Modularization;Design Smell;4
Source files should not have any duplicated blocks;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;4
Feature Concentration;Architectural Smell;Wide Hierarchy;Design Smell;4
Cyclically-dependent Modularization;Design Smell;Methods should not have too many parameters;Code Smell;4
Anonymous inner classes containing only one method should become lambdas;Code Smell;Empty arrays and collections should be returned instead of null;Code Smell;4
Printf-style format strings should be used correctly;Code Smell;Unnecessary imports should be removed;Code Smell;4
Sections of code should not be commented out;Code Smell;Unutilized Abstraction;Design Smell;4
Boolean literals should not be redundant;Code Smell;Methods should not have too many parameters;Code Smell;4
Boxed Boolean should be avoided in boolean expressions;Code Smell;throws declarations should not be superfluous;Code Smell;4
Map.get and value test should be replaced with single method call;Code Smell;Unutilized Abstraction;Design Smell;4
entrySet() should be iterated when both the key and value are needed;Code Smell;throws declarations should not be superfluous;Code Smell;4
Boolean literals should not be redundant;Code Smell;The diamond operator (<>) should be used;Code Smell;4
Cognitive Complexity of methods should not be too high;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;4
Collection.isEmpty() should be used to test for emptiness;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;4
Cyclically-dependent Modularization;Design Smell;Unnecessary imports should be removed;Code Smell;4
Anonymous inner classes containing only one method should become lambdas;Code Smell;Unused local variables should be removed;Code Smell;4
Catches should be combined;Code Smell;Track uses of TODO tags;Code Smell;4
Java 8 features should be preferred to Guava;Code Smell;Unused method parameters should be removed;Code Smell;4
Abstract classes without fields should be converted to interfaces;Code Smell;Feature Concentration;Architectural Smell;4
Conditionally executed blocks should be reachable;Code Smell;Methods should not have too many parameters;Code Smell;4
@Override should be used on overriding and implementing methods;Code Smell;The diamond operator (<>) should be used;Code Smell;4
Insufficient Modularization;Design Smell;Subclasses that add fields should override equals;Code Smell;4
Local variable and method parameter names should comply with a naming convention;Code Smell;The diamond operator (<>) should be used;Code Smell;4
Collapsible if statements should be merged;Code Smell;Generic exceptions should never be thrown;Code Smell;4
Null pointers should not be dereferenced;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;4
Anonymous inner classes containing only one method should become lambdas;Code Smell;Cyclically-dependent Modularization;Design Smell;4
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;Sections of code should not be commented out;Code Smell;4
Map.get and value test should be replaced with single method call;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;4
Deficient Encapsulation;Design Smell;String literals should not be duplicated;Code Smell;4
Classes from sun.* packages should not be used;Code Smell;Feature Concentration;Architectural Smell;4
Cognitive Complexity of methods should not be too high;Code Smell;Local variables should not shadow class fields;Code Smell;4
Constants should not be defined in interfaces;Code Smell;Feature Concentration;Architectural Smell;4
Feature Concentration;Architectural Smell;InterruptedException should not be ignored;Code Smell;4
Cyclically-dependent Modularization;Design Smell;Insufficient Modularization;Design Smell;4
Anonymous inner classes containing only one method should become lambdas;Code Smell;Collection.isEmpty() should be used to test for emptiness;Code Smell;4
Conditionally executed blocks should be reachable;Code Smell;Insufficient Modularization;Design Smell;4
Catches should be combined;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;4
Boxed Boolean should be avoided in boolean expressions;Code Smell;Source files should not have any duplicated blocks;Code Smell;4
Boolean literals should not be redundant;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;4
Unused method parameters should be removed;Code Smell;Unutilized Abstraction;Design Smell;3
Local variables should not be declared and then immediately returned or thrown;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;3
Cognitive Complexity of methods should not be too high;Code Smell;switch statements should have default clauses;Code Smell;3
Methods should not have too many parameters;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;3
Boxed Boolean should be avoided in boolean expressions;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;3
String literals should not be duplicated;Code Smell;Unused private fields should be removed;Code Smell;3
Maps with keys that are enum values should be replaced with EnumMap;Code Smell;The diamond operator (<>) should be used;Code Smell;3
Anonymous inner classes containing only one method should become lambdas;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;3
Arrays should not be copied using loops;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;3
Catches should be combined;Code Smell;Collapsible if statements should be merged;Code Smell;3
Catches should be combined;Code Smell;Local variables should not shadow class fields;Code Smell;3
Abstract methods should not be redundant;Code Smell;Unutilized Abstraction;Design Smell;3
Abstract classes without fields should be converted to interfaces;Code Smell;Utility classes should not have public constructors;Code Smell;3
Source files should not have any duplicated blocks;Code Smell;Subclasses that add fields should override equals;Code Smell;3
String literals should not be duplicated;Code Smell;Unused method parameters should be removed;Code Smell;3
@Deprecated code should not be used;Code Smell;InterruptedException should not be ignored;Code Smell;3
Feature Concentration;Architectural Smell;static base class members should not be accessed via derived types;Code Smell;3
Local variables should not be declared and then immediately returned or thrown;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;3
An iteration on a Collection should be performed on the type handled by the Collection;Code Smell;The diamond operator (<>) should be used;Code Smell;3
The diamond operator (<>) should be used;Code Smell;switch statements should have at least 3 case clauses;Code Smell;3
Java 8 features should be preferred to Guava;Code Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;3
Local variables should not shadow class fields;Code Smell;Track uses of TODO tags;Code Smell;3
Broken Hierarchy;Design Smell;Sections of code should not be commented out;Code Smell;3
Null pointers should not be dereferenced;Code Smell;Unused private fields should be removed;Code Smell;3
Unnecessary imports should be removed;Code Smell;Unused private fields should be removed;Code Smell;3
The diamond operator (<>) should be used;Code Smell;switch statements should have default clauses;Code Smell;3
Anonymous inner classes containing only one method should become lambdas;Code Smell;switch statements should have at least 3 case clauses;Code Smell;3
Printf-style format strings should be used correctly;Code Smell;Sections of code should not be commented out;Code Smell;3
Deprecated code should be removed;Code Smell;Feature Concentration;Architectural Smell;3
Anonymous inner classes containing only one method should become lambdas;Code Smell;Boolean literals should not be redundant;Code Smell;3
An iteration on a Collection should be performed on the type handled by the Collection;Code Smell;Feature Concentration;Architectural Smell;3
Loops should not contain more than a single break or continue statement;Code Smell;Unutilized Abstraction;Design Smell;3
Resources should be closed;Code Smell;Unutilized Abstraction;Design Smell;3
Anonymous inner classes containing only one method should become lambdas;Code Smell;Map.get and value test should be replaced with single method call;Code Smell;3
Method names should comply with a naming convention;Code Smell;Unnecessary imports should be removed;Code Smell;3
Deprecated code should be removed;Code Smell;Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;3
Generic exceptions should never be thrown;Code Smell;Source files should not have any duplicated blocks;Code Smell;3
Printf-style format strings should be used correctly;Code Smell;Unutilized Abstraction;Design Smell;3
Local variables should not shadow class fields;Code Smell;Source files should not have any duplicated blocks;Code Smell;3
Collapsible if statements should be merged;Code Smell;Track uses of TODO tags;Code Smell;3
Null pointers should not be dereferenced;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;3
Feature Concentration;Architectural Smell;switch statements should have at least 3 case clauses;Code Smell;3
Unused local variables should be removed;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;3
Generic exceptions should never be thrown;Code Smell;Local variables should not shadow class fields;Code Smell;3
Deficient Encapsulation;Design Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;3
Null pointers should not be dereferenced;Code Smell;Unutilized Abstraction;Design Smell;3
@Deprecated code should not be used;Code Smell;Deprecated code should be removed;Code Smell;3
Preconditions and logging arguments should not require evaluation;Code Smell;Sections of code should not be commented out;Code Smell;3
Map.get and value test should be replaced with single method call;Code Smell;Null pointers should not be dereferenced;Code Smell;3
Collection.isEmpty() should be used to test for emptiness;Code Smell;Cyclically-dependent Modularization;Design Smell;3
The diamond operator (<>) should be used;Code Smell;Type parameter names should comply with a naming convention;Code Smell;3
Feature Concentration;Architectural Smell;switch statements should have default clauses;Code Smell;3
Deficient Encapsulation;Design Smell;Source files should not have any duplicated blocks;Code Smell;3
Boxed Boolean should be avoided in boolean expressions;Code Smell;Generic exceptions should never be thrown;Code Smell;3
Unused private fields should be removed;Code Smell;throws declarations should not be superfluous;Code Smell;3
Collection.isEmpty() should be used to test for emptiness;Code Smell;Unutilized Abstraction;Design Smell;3
Boxed Boolean should be avoided in boolean expressions;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;3
Conditionally executed blocks should be reachable;Code Smell;String literals should not be duplicated;Code Smell;3
Dead stores should be removed;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;3
Boolean literals should not be redundant;Code Smell;Java 8 features should be preferred to Guava;Code Smell;3
Exceptions should be either logged or rethrown but not both;Code Smell;Unnecessary imports should be removed;Code Smell;3
Local variables should not be declared and then immediately returned or thrown;Code Smell;Unnecessary imports should be removed;Code Smell;3
Insufficient Modularization;Design Smell;Wide Hierarchy;Design Smell;3
Methods should not have identical implementations;Code Smell;Methods should not have too many parameters;Code Smell;3
Collapsible if statements should be merged;Code Smell;Null pointers should not be dereferenced;Code Smell;3
Feature Concentration;Architectural Smell;Strings and Boxed types should be compared using equals();Code Smell;3
Strings and Boxed types should be compared using equals();Code Smell;The diamond operator (<>) should be used;Code Smell;3
Feature Concentration;Architectural Smell;Unused local variables should be removed;Code Smell;3
Feature Concentration;Architectural Smell;Null checks should not be used with instanceof;Code Smell;3
Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;Deficient Encapsulation;Design Smell;3
Catches should be combined;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;3
@Override should be used on overriding and implementing methods;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;3
Anonymous inner classes containing only one method should become lambdas;Code Smell;Ternary operators should not be nested;Code Smell;3
Unutilized Abstraction;Design Smell;Utility classes should not have public constructors;Code Smell;3
Anonymous inner classes containing only one method should become lambdas;Code Smell;Local variables should not shadow class fields;Code Smell;3
@Deprecated code should not be used;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;3
Catches should be combined;Code Smell;Unused method parameters should be removed;Code Smell;3
The diamond operator (<>) should be used;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;3
Unutilized Abstraction;Design Smell;Using command line arguments is security-sensitive;Code Smell;3
Boxed Boolean should be avoided in boolean expressions;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;3
Deficient Encapsulation;Design Smell;Methods should not be empty;Code Smell;3
Subclasses that add fields should override equals;Code Smell;The diamond operator (<>) should be used;Code Smell;3
Insufficient Modularization;Design Smell;Unused local variables should be removed;Code Smell;3
Abstract classes without fields should be converted to interfaces;Code Smell;The diamond operator (<>) should be used;Code Smell;3
Boolean expressions should not be gratuitous;Code Smell;Methods should not have too many parameters;Code Smell;3
@Deprecated code should not be used;Code Smell;Conditionally executed blocks should be reachable;Code Smell;3
Anonymous inner classes containing only one method should become lambdas;Code Smell;Collapsible if statements should be merged;Code Smell;3
Generic exceptions should never be thrown;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;3
Loops should not contain more than a single break or continue statement;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;3
Collapsible if statements should be merged;Code Smell;Unutilized Abstraction;Design Smell;3
Deficient Encapsulation;Design Smell;Multifaceted Abstraction;Design Smell;3
InterruptedException should not be ignored;Code Smell;Methods should not have too many parameters;Code Smell;3
Feature Concentration;Architectural Smell;Field names should comply with a naming convention;Code Smell;3
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;throws declarations should not be superfluous;Code Smell;3
Local variable and method parameter names should comply with a naming convention;Code Smell;Methods should not have too many parameters;Code Smell;3
Cyclically-dependent Modularization;Design Smell;Unused private fields should be removed;Code Smell;3
Java 8 features should be preferred to Guava;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;3
@Override should be used on overriding and implementing methods;Code Smell;Unutilized Abstraction;Design Smell;3
Sections of code should not be commented out;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;3
Insufficient Modularization;Design Smell;Map.get and value test should be replaced with single method call;Code Smell;3
Boolean expressions should not be gratuitous;Code Smell;The diamond operator (<>) should be used;Code Smell;3
Generic exceptions should never be thrown;Code Smell;Null pointers should not be dereferenced;Code Smell;3
Null pointers should not be dereferenced;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;3
Catches should be combined;Code Smell;Changing or bypassing accessibility is security-sensitive;Code Smell;3
Deprecated code should be removed;Code Smell;Insufficient Modularization;Design Smell;3
Feature Concentration;Architectural Smell;Loggers should be named for their enclosing classes;Code Smell;3
Preconditions and logging arguments should not require evaluation;Code Smell;Track uses of TODO tags;Code Smell;3
Loops should not contain more than a single break or continue statement;Code Smell;Unnecessary imports should be removed;Code Smell;3
Boolean literals should not be redundant;Code Smell;Track uses of TODO tags;Code Smell;3
Deficient Encapsulation;Design Smell;Unused method parameters should be removed;Code Smell;3
Standard outputs should not be used directly to log anything;Code Smell;Unutilized Abstraction;Design Smell;3
Cyclically-dependent Modularization;Design Smell;static base class members should not be accessed via derived types;Code Smell;3
Cognitive Complexity of methods should not be too high;Code Smell;Try-catch blocks should not be nested;Code Smell;3
Exceptions should be either logged or rethrown but not both;Code Smell;Feature Concentration;Architectural Smell;3
Feature Concentration;Architectural Smell;Inheritance tree of classes should not be too deep;Code Smell;3
Conditionally executed blocks should be reachable;Code Smell;throws declarations should not be superfluous;Code Smell;3
Local variable and method parameter names should comply with a naming convention;Code Smell;Method names should comply with a naming convention;Code Smell;3
Java 8 features should be preferred to Guava;Code Smell;String literals should not be duplicated;Code Smell;3
Anonymous inner classes containing only one method should become lambdas;Code Smell;Resources should be closed;Code Smell;3
Child class fields should not shadow parent class fields;Code Smell;Unnecessary imports should be removed;Code Smell;3
Catches should be combined;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;3
Cognitive Complexity of methods should not be too high;Code Smell;Conditionally executed blocks should be reachable;Code Smell;3
Changing or bypassing accessibility is security-sensitive;Code Smell;The diamond operator (<>) should be used;Code Smell;3
Unused method parameters should be removed;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;3
Standard outputs should not be used directly to log anything;Code Smell;Using command line arguments is security-sensitive;Code Smell;3
Feature Concentration;Architectural Smell;Ternary operators should not be nested;Code Smell;3
Cognitive Complexity of methods should not be too high;Code Smell;Dead stores should be removed;Code Smell;3
Catches should be combined;Code Smell;Dead stores should be removed;Code Smell;3
Map.get and value test should be replaced with single method call;Code Smell;Unnecessary imports should be removed;Code Smell;3
Cognitive Complexity of methods should not be too high;Code Smell;Empty arrays and collections should be returned instead of null;Code Smell;3
Methods should not have too many parameters;Code Smell;Ternary operators should not be nested;Code Smell;3
Loops should not contain more than a single break or continue statement;Code Smell;Track uses of TODO tags;Code Smell;3
The diamond operator (<>) should be used;Code Smell;static base class members should not be accessed via derived types;Code Smell;3
Printf-style format strings should be used correctly;Code Smell;String literals should not be duplicated;Code Smell;3
InterruptedException should not be ignored;Code Smell;The diamond operator (<>) should be used;Code Smell;3
Methods should not have too many parameters;Code Smell;Nested blocks of code should not be left empty;Code Smell;3
Broken Hierarchy;Design Smell;Generic exceptions should never be thrown;Code Smell;3
Cognitive Complexity of methods should not be too high;Code Smell;Ternary operators should not be nested;Code Smell;3
Catches should be combined;Code Smell;Sections of code should not be commented out;Code Smell;3
Feature Concentration;Architectural Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;3
Unnecessary imports should be removed;Code Smell;Utility classes should not have public constructors;Code Smell;3
Boolean literals should not be redundant;Code Smell;Insufficient Modularization;Design Smell;3
Collapsible if statements should be merged;Code Smell;Deficient Encapsulation;Design Smell;3
Cognitive Complexity of methods should not be too high;Code Smell;Unused private fields should be removed;Code Smell;3
Java 8 features should be preferred to Guava;Code Smell;Map.get and value test should be replaced with single method call;Code Smell;3
Cognitive Complexity of methods should not be too high;Code Smell;Deprecated code should be removed;Code Smell;3
Loggers should be named for their enclosing classes;Code Smell;The diamond operator (<>) should be used;Code Smell;2
Local variables should not be declared and then immediately returned or thrown;Code Smell;Null pointers should not be dereferenced;Code Smell;2
Method names should comply with a naming convention;Code Smell;Unused private fields should be removed;Code Smell;2
Anonymous inner classes containing only one method should become lambdas;Code Smell;Type parameter names should comply with a naming convention;Code Smell;2
Collection.isEmpty() should be used to test for emptiness;Code Smell;Unnecessary imports should be removed;Code Smell;2
Cognitive Complexity of methods should not be too high;Code Smell;Methods should not be empty;Code Smell;2
Track uses of TODO tags;Code Smell;Wide Hierarchy;Design Smell;2
Empty arrays and collections should be returned instead of null;Code Smell;Methods should not have too many parameters;Code Smell;2
Method names should comply with a naming convention;Code Smell;Null pointers should not be dereferenced;Code Smell;2
Abstract methods should not be redundant;Code Smell;Feature Concentration;Architectural Smell;2
Local variables should not be declared and then immediately returned or thrown;Code Smell;Unused private fields should be removed;Code Smell;2
Methods should not be empty;Code Smell;Methods should not have too many parameters;Code Smell;2
Broken Hierarchy;Design Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;2
@Deprecated code should not be used;Code Smell;Unnecessary imports should be removed;Code Smell;2
Map.get and value test should be replaced with single method call;Code Smell;Try-catch blocks should not be nested;Code Smell;2
@Deprecated code should not be used;Code Smell;Unused private fields should be removed;Code Smell;2
Abstract methods should not be redundant;Code Smell;Anonymous inner classes containing only one method should become lambdas;Code Smell;2
Maps with keys that are enum values should be replaced with EnumMap;Code Smell;Track uses of TODO tags;Code Smell;2
Changing or bypassing accessibility is security-sensitive;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;2
Null pointers should not be dereferenced;Code Smell;Track uses of TODO tags;Code Smell;2
Try-catch blocks should not be nested;Code Smell;throws declarations should not be superfluous;Code Smell;2
Insufficient Modularization;Design Smell;Method names should comply with a naming convention;Code Smell;2
Constants should not be defined in interfaces;Code Smell;Deficient Encapsulation;Design Smell;2
Dead stores should be removed;Code Smell;String literals should not be duplicated;Code Smell;2
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;Unused method parameters should be removed;Code Smell;2
Changing or bypassing accessibility is security-sensitive;Code Smell;throws declarations should not be superfluous;Code Smell;2
Collapsible if statements should be merged;Code Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;2
Loggers should be named for their enclosing classes;Code Smell;Unutilized Abstraction;Design Smell;2
Generic exceptions should never be thrown;Code Smell;ThreadLocal variables should be cleaned up when no longer used;Code Smell;2
Loops should not contain more than a single break or continue statement;Code Smell;Sections of code should not be commented out;Code Smell;2
Boolean expressions should not be gratuitous;Code Smell;Collapsible if statements should be merged;Code Smell;2
Unnecessary imports should be removed;Code Smell;switch statements should have default clauses;Code Smell;2
Empty arrays and collections should be returned instead of null;Code Smell;Unused method parameters should be removed;Code Smell;2
Feature Envy;Design Smell;Insufficient Modularization;Design Smell;2
Resources should be closed;Code Smell;throws declarations should not be superfluous;Code Smell;2
Boolean literals should not be redundant;Code Smell;Method names should comply with a naming convention;Code Smell;2
Java 8 features should be preferred to Guava;Code Smell;Utility classes should not have public constructors;Code Smell;2
Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;Unnecessary imports should be removed;Code Smell;2
Cognitive Complexity of methods should not be too high;Code Smell;InterruptedException should not be ignored;Code Smell;2
Boxed Boolean should be avoided in boolean expressions;Code Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;2
Conditionally executed blocks should be reachable;Code Smell;Ternary operators should not be nested;Code Smell;2
Feature Concentration;Architectural Smell;Non-primitive fields should not be volatile;Code Smell;2
Boolean literals should not be redundant;Code Smell;Printf-style format strings should be used correctly;Code Smell;2
Try-catch blocks should not be nested;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;2
Arrays should not be copied using loops;Code Smell;Feature Concentration;Architectural Smell;2
Catches should be combined;Code Smell;Cyclically-dependent Modularization;Design Smell;2
Cyclically-dependent Modularization;Design Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;2
Unnecessary Abstraction;Design Smell;Unutilized Abstraction;Design Smell;2
Deficient Encapsulation;Design Smell;Empty statements should be removed;Code Smell;2
Boxed Boolean should be avoided in boolean expressions;Code Smell;InterruptedException should not be ignored;Code Smell;2
Resources should be closed;Code Smell;The diamond operator (<>) should be used;Code Smell;2
Cyclically-dependent Modularization;Design Smell;Empty statements should be removed;Code Smell;2
Classes from sun.* packages should not be used;Code Smell;Source files should not have any duplicated blocks;Code Smell;2
Field names should comply with a naming convention;Code Smell;The diamond operator (<>) should be used;Code Smell;2
Java 8 features should be preferred to Guava;Code Smell;Resources should be closed;Code Smell;2
Collection.isEmpty() should be used to test for emptiness;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;2
Cognitive Complexity of methods should not be too high;Code Smell;Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;2
Arrays should not be copied using loops;Code Smell;The diamond operator (<>) should be used;Code Smell;2
Two branches in a conditional structure should not have exactly the same implementation;Code Smell;throws declarations should not be superfluous;Code Smell;2
Child class fields should not shadow parent class fields;Code Smell;Track uses of TODO tags;Code Smell;2
Insufficient Modularization;Design Smell;Jump statements should not be redundant;Code Smell;2
Generic exceptions should never be thrown;Code Smell;String literals should not be duplicated;Code Smell;2
Arrays should not be copied using loops;Code Smell;Methods should not have too many parameters;Code Smell;2
Printf-style format strings should be used correctly;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;2
Private fields only used as local variables in methods should become local variables;Code Smell;Unutilized Abstraction;Design Smell;2
Cyclically-dependent Modularization;Design Smell;Method names should comply with a naming convention;Code Smell;2
Cyclically-dependent Modularization;Design Smell;Ternary operators should not be nested;Code Smell;2
Catches should be combined;Code Smell;Printf-style format strings should be used correctly;Code Smell;2
Unused local variables should be removed;Code Smell;Unused method parameters should be removed;Code Smell;2
Collection.isEmpty() should be used to test for emptiness;Code Smell;Null pointers should not be dereferenced;Code Smell;2
Deprecated code should be removed;Code Smell;Source files should not have any duplicated blocks;Code Smell;2
Cognitive Complexity of methods should not be too high;Code Smell;Unused local variables should be removed;Code Smell;2
Field names should comply with a naming convention;Code Smell;Track uses of TODO tags;Code Smell;2
Printf-style format strings should be used correctly;Code Smell;Try-catch blocks should not be nested;Code Smell;2
Unnecessary imports should be removed;Code Smell;Unused local variables should be removed;Code Smell;2
Catches should be combined;Code Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;2
Generic exceptions should never be thrown;Code Smell;Modifiers should be declared in the correct order;Code Smell;2
Insufficient Modularization;Design Smell;Ternary operators should not be nested;Code Smell;2
Catches should be combined;Code Smell;Subclasses that add fields should override equals;Code Smell;2
Collapsible if statements should be merged;Code Smell;Collection.isEmpty() should be used to test for emptiness;Code Smell;2
Feature Concentration;Architectural Smell;Fields in a Serializable class should either be transient or serializable;Code Smell;2
Boxed Boolean should be avoided in boolean expressions;Code Smell;Cyclically-dependent Modularization;Design Smell;2
Insufficient Modularization;Design Smell;InterruptedException should not be ignored;Code Smell;2
Anonymous inner classes containing only one method should become lambdas;Code Smell;switch statements should have default clauses;Code Smell;2
String literals should not be duplicated;Code Smell;switch statements should have default clauses;Code Smell;2
Fields in a Serializable class should either be transient or serializable;Code Smell;Sections of code should not be commented out;Code Smell;2
Deprecated code should be removed;Code Smell;Methods should not have too many parameters;Code Smell;2
Cyclically-dependent Modularization;Design Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;2
Child class fields should not shadow parent class fields;Code Smell;Source files should not have any duplicated blocks;Code Smell;2
Assignments should not be redundant;Code Smell;Deficient Encapsulation;Design Smell;2
Nested blocks of code should not be left empty;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;2
Arrays should not be copied using loops;Code Smell;Insufficient Modularization;Design Smell;2
Feature Concentration;Architectural Smell;Generic wildcard types should not be used in return parameters;Code Smell;2
Inheritance tree of classes should not be too deep;Code Smell;The diamond operator (<>) should be used;Code Smell;2
Assignments should not be redundant;Code Smell;Generic exceptions should never be thrown;Code Smell;2
Java 8 features should be preferred to Guava;Code Smell;Null pointers should not be dereferenced;Code Smell;2
Methods should not be empty;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;2
Anonymous inner classes containing only one method should become lambdas;Code Smell;Subclasses that add fields should override equals;Code Smell;2
Anonymous inner classes containing only one method should become lambdas;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;2
Java 8 features should be preferred to Guava;Code Smell;Source files should not have any duplicated blocks;Code Smell;2
Java 8 features should be preferred to Guava;Code Smell;Unused local variables should be removed;Code Smell;2
Methods should not have identical implementations;Code Smell;Source files should not have any duplicated blocks;Code Smell;2
Cognitive Complexity of methods should not be too high;Code Smell;Jump statements should not be redundant;Code Smell;2
Methods should not be empty;Code Smell;static base class members should not be accessed via derived types;Code Smell;2
Local variable and method parameter names should comply with a naming convention;Code Smell;Printf-style format strings should be used correctly;Code Smell;2
Broken Hierarchy;Design Smell;Subclasses that add fields should override equals;Code Smell;2
Boolean literals should not be redundant;Code Smell;String literals should not be duplicated;Code Smell;2
Source files should not have any duplicated blocks;Code Smell;Unused private fields should be removed;Code Smell;2
Generic exceptions should never be thrown;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;2
Cognitive Complexity of methods should not be too high;Code Smell;Field names should comply with a naming convention;Code Smell;2
Catches should be combined;Code Smell;Exceptions should be either logged or rethrown but not both;Code Smell;2
ThreadLocal variables should be cleaned up when no longer used;Code Smell;ThreadLocal.withInitial should be preferred;Code Smell;2
Resources should be closed;Code Smell;Track uses of TODO tags;Code Smell;2
Anonymous inner classes containing only one method should become lambdas;Code Smell;Utility classes should not have public constructors;Code Smell;2
Dead stores should be removed;Code Smell;Unnecessary imports should be removed;Code Smell;2
Conditionally executed blocks should be reachable;Code Smell;Generic exceptions should never be thrown;Code Smell;2
Printf-style format strings should be used correctly;Code Smell;Track uses of TODO tags;Code Smell;2
Exceptions should be either logged or rethrown but not both;Code Smell;throws declarations should not be superfluous;Code Smell;2
Methods should not have identical implementations;Code Smell;The diamond operator (<>) should be used;Code Smell;2
Insufficient Modularization;Design Smell;static base class members should not be accessed via derived types;Code Smell;2
Arrays should not be copied using loops;Code Smell;Track uses of TODO tags;Code Smell;2
Method names should comply with a naming convention;Code Smell;String literals should not be duplicated;Code Smell;2
Map.get and value test should be replaced with single method call;Code Smell;Unused method parameters should be removed;Code Smell;2
Anonymous inner classes containing only one method should become lambdas;Code Smell;Wide Hierarchy;Design Smell;2
Dead stores should be removed;Code Smell;Nested blocks of code should not be left empty;Code Smell;2
Cognitive Complexity of methods should not be too high;Code Smell;Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;2
Catches should be combined;Code Smell;Collection.isEmpty() should be used to test for emptiness;Code Smell;2
Boolean expressions should not be gratuitous;Code Smell;Insufficient Modularization;Design Smell;2
Collection.isEmpty() should be used to test for emptiness;Code Smell;Generic exceptions should never be thrown;Code Smell;2
Abstract classes without fields should be converted to interfaces;Code Smell;Unutilized Abstraction;Design Smell;2
String literals should not be duplicated;Code Smell;Unused local variables should be removed;Code Smell;2
Map.get and value test should be replaced with single method call;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;2
Insufficient Modularization;Design Smell;Nested blocks of code should not be left empty;Code Smell;2
Loops should not contain more than a single break or continue statement;Code Smell;Nested blocks of code should not be left empty;Code Smell;2
Methods should not have too many parameters;Code Smell;Resources should be closed;Code Smell;2
Boxed Boolean should be avoided in boolean expressions;Code Smell;Deficient Encapsulation;Design Smell;2
Collapsible if statements should be merged;Code Smell;Unused method parameters should be removed;Code Smell;2
Catches should be combined;Code Smell;Source files should not have any duplicated blocks;Code Smell;2
Dead stores should be removed;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;2
Modifiers should be declared in the correct order;Code Smell;Unutilized Abstraction;Design Smell;2
Collapsible if statements should be merged;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;2
Fields in a Serializable class should either be transient or serializable;Code Smell;String literals should not be duplicated;Code Smell;2
Null pointers should not be dereferenced;Code Smell;Source files should not have any duplicated blocks;Code Smell;2
Local variables should not be declared and then immediately returned or thrown;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;2
@Override should be used on overriding and implementing methods;Code Smell;Generic exceptions should never be thrown;Code Smell;2
@Deprecated code should not be used;Code Smell;Classes from sun.* packages should not be used;Code Smell;2
Generic exceptions should never be thrown;Code Smell;ThreadLocal.withInitial should be preferred;Code Smell;2
Generic exceptions should never be thrown;Code Smell;Ternary operators should not be nested;Code Smell;2
Catches should be combined;Code Smell;Unused local variables should be removed;Code Smell;2
Dead stores should be removed;Code Smell;Java 8 features should be preferred to Guava;Code Smell;2
Catches should be combined;Code Smell;Null pointers should not be dereferenced;Code Smell;2
Preconditions and logging arguments should not require evaluation;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;2
Catches should be combined;Code Smell;Try-catch blocks should not be nested;Code Smell;2
Feature Concentration;Architectural Smell;Private fields only used as local variables in methods should become local variables;Code Smell;2
Method names should comply with a naming convention;Code Smell;throws declarations should not be superfluous;Code Smell;2
Generic exceptions should never be thrown;Code Smell;Utility classes should not have public constructors;Code Smell;2
Multifaceted Abstraction;Design Smell;Unutilized Abstraction;Design Smell;2
Null checks should not be used with instanceof;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;2
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;Using regular expressions is security-sensitive;Code Smell;2
Method names should comply with a naming convention;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;2
Feature Concentration;Architectural Smell;Unused private methods should be removed;Code Smell;2
Boolean literals should not be redundant;Code Smell;Boxed Boolean should be avoided in boolean expressions;Code Smell;2
Cognitive Complexity of methods should not be too high;Code Smell;Generic wildcard types should not be used in return parameters;Code Smell;2
Exceptions should be either logged or rethrown but not both;Code Smell;String literals should not be duplicated;Code Smell;2
Methods should not have too many parameters;Code Smell;Unused local variables should be removed;Code Smell;2
Cognitive Complexity of methods should not be too high;Code Smell;Resources should be closed;Code Smell;2
Child class fields should not shadow parent class fields;Code Smell;Java 8 features should be preferred to Guava;Code Smell;2
Synchronized classes Vector  Hashtable  Stack and StringBuffer should not be used;Code Smell;Unnecessary imports should be removed;Code Smell;2
Strings and Boxed types should be compared using equals();Code Smell;Unutilized Abstraction;Design Smell;2
Collection.isEmpty() should be used to test for emptiness;Code Smell;throws declarations should not be superfluous;Code Smell;2
String literals should not be duplicated;Code Smell;URIs should not be hardcoded;Code Smell;2
Local variable and method parameter names should comply with a naming convention;Code Smell;Unnecessary imports should be removed;Code Smell;2
Null checks should not be used with instanceof;Code Smell;throws declarations should not be superfluous;Code Smell;2
Anonymous inner classes containing only one method should become lambdas;Code Smell;Constant names should comply with a naming convention;Code Smell;2
Unutilized Abstraction;Design Smell;static base class members should not be accessed via derived types;Code Smell;2
Cognitive Complexity of methods should not be too high;Code Smell;Using regular expressions is security-sensitive;Code Smell;2
Insufficient Modularization;Design Smell;Multifaceted Abstraction;Design Smell;2
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;equals(Object obj) and hashCode() should be overridden in pairs;Code Smell;2
Catches should be combined;Code Smell;Child class fields should not shadow parent class fields;Code Smell;2
Ternary operators should not be nested;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;2
Local variables should not be declared and then immediately returned or thrown;Code Smell;throws declarations should not be superfluous;Code Smell;2
Preconditions and logging arguments should not require evaluation;Code Smell;switch statements should have default clauses;Code Smell;2
Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;Feature Concentration;Architectural Smell;2
@Deprecated code should not be used;Code Smell;Ternary operators should not be nested;Code Smell;2
Boolean expressions should not be gratuitous;Code Smell;Generic exceptions should never be thrown;Code Smell;2
Changing or bypassing accessibility is security-sensitive;Code Smell;Generic exceptions should never be thrown;Code Smell;2
Java 8 features should be preferred to Guava;Code Smell;Methods should not be empty;Code Smell;2
Boxed Boolean should be avoided in boolean expressions;Code Smell;Broken Hierarchy;Design Smell;2
Exceptions should be either logged or rethrown but not both;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;2
Deficient Encapsulation;Design Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;2
Methods should not have too many parameters;Code Smell;switch statements should have default clauses;Code Smell;2
InterruptedException should not be ignored;Code Smell;Nested blocks of code should not be left empty;Code Smell;2
Jump statements should not be redundant;Code Smell;Null pointers should not be dereferenced;Code Smell;2
Subclasses that add fields should override equals;Code Smell;Unnecessary imports should be removed;Code Smell;2
Anonymous inner classes containing only one method should become lambdas;Code Smell;Field names should comply with a naming convention;Code Smell;2
Collection.isEmpty() should be used to test for emptiness;Code Smell;String literals should not be duplicated;Code Smell;2
Boxed Boolean should be avoided in boolean expressions;Code Smell;Unutilized Abstraction;Design Smell;2
Empty arrays and collections should be returned instead of null;Code Smell;throws declarations should not be superfluous;Code Smell;2
Anonymous inner classes containing only one method should become lambdas;Code Smell;Inheritance tree of classes should not be too deep;Code Smell;2
Boolean literals should not be redundant;Code Smell;Unnecessary imports should be removed;Code Smell;2
Insufficient Modularization;Design Smell;switch statements should have default clauses;Code Smell;2
Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;Insufficient Modularization;Design Smell;2
Boxed Boolean should be avoided in boolean expressions;Code Smell;Ternary operators should not be nested;Code Smell;2
Resources should be closed;Code Smell;Using command line arguments is security-sensitive;Code Smell;2
Broken Hierarchy;Design Smell;Child class fields should not shadow parent class fields;Code Smell;2
Insufficient Modularization;Design Smell;switch statements should have at least 3 case clauses;Code Smell;2
Methods should not be empty;Code Smell;throws declarations should not be superfluous;Code Smell;2
Map.get and value test should be replaced with single method call;Code Smell;Track uses of TODO tags;Code Smell;2
Collection.isEmpty() should be used to test for emptiness;Code Smell;Synchronized classes Vector  Hashtable  Stack and StringBuffer should not be used;Code Smell;2
Field names should comply with a naming convention;Code Smell;Public constants and fields initialized at declaration should be static final rather than merely final;Code Smell;2
Collection.isEmpty() should be used to test for emptiness;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;2
Boxed Boolean should be avoided in boolean expressions;Code Smell;Conditionally executed blocks should be reachable;Code Smell;2
Externalizable classes should have no-arguments constructors;Code Smell;Fields in a Serializable class should either be transient or serializable;Code Smell;2
InterruptedException should not be ignored;Code Smell;Methods should not be empty;Code Smell;2
Boolean expressions should not be gratuitous;Code Smell;Unnecessary imports should be removed;Code Smell;2
@Override should be used on overriding and implementing methods;Code Smell;Catches should be combined;Code Smell;2
Method names should comply with a naming convention;Code Smell;Try-catch blocks should not be nested;Code Smell;2
Sections of code should not be commented out;Code Smell;Unused method parameters should be removed;Code Smell;2
Conditionally executed blocks should be reachable;Code Smell;Source files should not have any duplicated blocks;Code Smell;2
Insufficient Modularization;Design Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;2
Null checks should not be used with instanceof;Code Smell;The diamond operator (<>) should be used;Code Smell;2
Catches should be combined;Code Smell;Utility classes should not have public constructors;Code Smell;2
Deficient Encapsulation;Design Smell;Nested blocks of code should not be left empty;Code Smell;2
Feature Concentration;Architectural Smell;Unnecessary Abstraction;Design Smell;2
Child class fields should not shadow parent class fields;Code Smell;InterruptedException should not be ignored;Code Smell;2
Java 8 features should be preferred to Guava;Code Smell;Sections of code should not be commented out;Code Smell;2
Loops should not contain more than a single break or continue statement;Code Smell;Unused method parameters should be removed;Code Smell;2
Dead stores should be removed;Code Smell;Unused method parameters should be removed;Code Smell;2
Boolean literals should not be redundant;Code Smell;Catches should be combined;Code Smell;2
Method names should comply with a naming convention;Code Smell;switch statements should have default clauses;Code Smell;2
Assignments should not be redundant;Code Smell;Methods should not have too many parameters;Code Smell;2
Exceptions should be either logged or rethrown but not both;Code Smell;Methods should not have too many parameters;Code Smell;2
Anonymous inner classes containing only one method should become lambdas;Code Smell;Non-primitive fields should not be volatile;Code Smell;2
Catches should be combined;Code Smell;Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;2
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;String literals should not be duplicated;Code Smell;2
Exceptions should be either logged or rethrown but not both;Code Smell;Generic exceptions should never be thrown;Code Smell;2
Null pointers should not be dereferenced;Code Smell;Printf-style format strings should be used correctly;Code Smell;2
Feature Concentration;Architectural Smell;ThreadLocal variables should be cleaned up when no longer used;Code Smell;2
Empty arrays and collections should be returned instead of null;Code Smell;Java 8 features should be preferred to Guava;Code Smell;2
Conditionally executed blocks should be reachable;Code Smell;Unused private fields should be removed;Code Smell;2
Broken Hierarchy;Design Smell;Cyclically-dependent Modularization;Design Smell;2
Collection.isEmpty() should be used to test for emptiness;Code Smell;Java 8 features should be preferred to Guava;Code Smell;2
Fields in a Serializable class should either be transient or serializable;Code Smell;Subclasses that add fields should override equals;Code Smell;2
Generic exceptions should never be thrown;Code Smell;Unused method parameters should be removed;Code Smell;2
Null checks should not be used with instanceof;Code Smell;Unutilized Abstraction;Design Smell;2
Catches should be combined;Code Smell;Method names should comply with a naming convention;Code Smell;2
Conditionally executed blocks should be reachable;Code Smell;Null pointers should not be dereferenced;Code Smell;2
Synchronized classes Vector  Hashtable  Stack and StringBuffer should not be used;Code Smell;The diamond operator (<>) should be used;Code Smell;2
Empty arrays and collections should be returned instead of null;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;2
Cognitive Complexity of methods should not be too high;Code Smell;Strings should not be concatenated using '+' in a loop;Code Smell;2
Source files should not have any duplicated blocks;Code Smell;Synchronized classes Vector  Hashtable  Stack and StringBuffer should not be used;Code Smell;2
Local variable and method parameter names should comply with a naming convention;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;2
Method names should comply with a naming convention;Code Smell;Track uses of TODO tags;Code Smell;2
Local variables should not be declared and then immediately returned or thrown;Code Smell;Printf-style format strings should be used correctly;Code Smell;2
Resources should be closed;Code Smell;Standard outputs should not be used directly to log anything;Code Smell;2
Feature Concentration;Architectural Smell;ThreadLocal.withInitial should be preferred;Code Smell;2
Catches should be combined;Code Smell;Map.get and value test should be replaced with single method call;Code Smell;2
Loops should not contain more than a single break or continue statement;Code Smell;throws declarations should not be superfluous;Code Smell;2
Boxed Boolean should be avoided in boolean expressions;Code Smell;Track uses of TODO tags;Code Smell;2
Null pointers should not be dereferenced;Code Smell;Sections of code should not be commented out;Code Smell;2
Boolean expressions should not be gratuitous;Code Smell;Boxed Boolean should be avoided in boolean expressions;Code Smell;2
Cyclically-dependent Modularization;Design Smell;Source files should not have any duplicated blocks;Code Smell;2
Local variables should not be declared and then immediately returned or thrown;Code Smell;Unused method parameters should be removed;Code Smell;2
Insufficient Modularization;Design Smell;Methods should not be empty;Code Smell;2
Feature Concentration;Architectural Smell;Redundant casts should not be used;Code Smell;2
Collection.isEmpty() should be used to test for emptiness;Code Smell;Track uses of TODO tags;Code Smell;2
Track uses of TODO tags;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;2
The diamond operator (<>) should be used;Code Smell;Unused private methods should be removed;Code Smell;2
Methods should not be empty;Code Smell;Source files should not have any duplicated blocks;Code Smell;2
Feature Concentration;Architectural Smell;Maps with keys that are enum values should be replaced with EnumMap;Code Smell;2
Method names should comply with a naming convention;Code Smell;Unused method parameters should be removed;Code Smell;2
Boolean expressions should not be gratuitous;Code Smell;Nested blocks of code should not be left empty;Code Smell;2
Broken Hierarchy;Design Smell;Deficient Encapsulation;Design Smell;2
The diamond operator (<>) should be used;Code Smell;Wide Hierarchy;Design Smell;2
Map.get and value test should be replaced with single method call;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;2
Boolean expressions should not be gratuitous;Code Smell;Feature Concentration;Architectural Smell;2
Loops should not contain more than a single break or continue statement;Code Smell;Null pointers should not be dereferenced;Code Smell;2
Collapsible if statements should be merged;Code Smell;Nested blocks of code should not be left empty;Code Smell;2
Preconditions and logging arguments should not require evaluation;Code Smell;Try-catch blocks should not be nested;Code Smell;2
Arrays should not be copied using loops;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;2
Local variable and method parameter names should comply with a naming convention;Code Smell;switch statements should have default clauses;Code Smell;2
Methods should not be empty;Code Smell;Unused method parameters should be removed;Code Smell;2
Feature Concentration;Architectural Smell;Nullness of parameters should be guaranteed;Code Smell;2
Child class fields should not shadow parent class fields;Code Smell;Sections of code should not be commented out;Code Smell;2
Null pointers should not be dereferenced;Code Smell;String literals should not be duplicated;Code Smell;2
Methods should not have identical implementations;Code Smell;Sections of code should not be commented out;Code Smell;2
Ternary operators should not be nested;Code Smell;throws declarations should not be superfluous;Code Smell;2
Cyclically-dependent Modularization;Design Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;2
Utility classes should not have public constructors;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;2
Conditionally executed blocks should be reachable;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;2
Dead stores should be removed;Code Smell;Methods should not have too many parameters;Code Smell;2
@Deprecated code should not be used;Code Smell;Unused method parameters should be removed;Code Smell;2
Deprecated code should be removed;Code Smell;Unnecessary imports should be removed;Code Smell;2
Collapsible if statements should be merged;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;2
Catches should be combined;Code Smell;Nested blocks of code should not be left empty;Code Smell;2
Classes that override clone should be Cloneable and call super.clone();Code Smell;The diamond operator (<>) should be used;Code Smell;1
Sections of code should not be commented out;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
Insufficient Modularization;Design Smell;Printf-style format strings should not lead to unexpected behavior at runtime;Code Smell;1
String literals should not be duplicated;Code Smell;Type parameter names should comply with a naming convention;Code Smell;1
An iteration on a Collection should be performed on the type handled by the Collection;Code Smell;Unutilized Abstraction;Design Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;1
Local variables should not be declared and then immediately returned or thrown;Code Smell;Nested blocks of code should not be left empty;Code Smell;1
Resources should be closed;Code Smell;Sections of code should not be commented out;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Redundant casts should not be used;Code Smell;1
Field names should comply with a naming convention;Code Smell;Sections of code should not be commented out;Code Smell;1
Source files should not have any duplicated blocks;Code Smell;Unused local variables should be removed;Code Smell;1
Catches should be combined;Code Smell;URIs should not be hardcoded;Code Smell;1
Feature Concentration;Architectural Smell;Overrides should match their parent class methods in synchronization;Code Smell;1
Field names should comply with a naming convention;Code Smell;Wide Hierarchy;Design Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;Jump statements should not be redundant;Code Smell;1
Broken Hierarchy;Design Smell;Local variables should not shadow class fields;Code Smell;1
Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;ThreadLocal.withInitial should be preferred;Code Smell;1
Local variable and method parameter names should comply with a naming convention;Code Smell;throws declarations should not be superfluous;Code Smell;1
Conditionally executed blocks should be reachable;Code Smell;Try-catch blocks should not be nested;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Subclasses that add fields should override equals;Code Smell;1
Feature Concentration;Architectural Smell;Mutable fields should not be public static;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Fields in a Serializable class should either be transient or serializable;Code Smell;1
Loggers should be named for their enclosing classes;Code Smell;Methods should not be empty;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Strings should not be concatenated using '+' in a loop;Code Smell;1
Local variables should not be declared and then immediately returned or thrown;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;1
InterruptedException should not be ignored;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Inheritance tree of classes should not be too deep;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;switch statements should have at least 3 case clauses;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Null pointers should not be dereferenced;Code Smell;1
Sections of code should not be commented out;Code Smell;Utility classes should not have public constructors;Code Smell;1
Preconditions and logging arguments should not require evaluation;Code Smell;Resources should be closed;Code Smell;1
Deprecated code should be removed;Code Smell;Strings should not be concatenated using '+' in a loop;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Nested blocks of code should not be left empty;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Inheritance tree of classes should not be too deep;Code Smell;Sections of code should not be commented out;Code Smell;1
Unutilized Abstraction;Design Smell;notifyAll should be used;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Nested blocks of code should not be left empty;Code Smell;1
Mutable fields should not be public static;Code Smell;String literals should not be duplicated;Code Smell;1
Collapsible if statements should be merged;Code Smell;Printf-style format strings should not lead to unexpected behavior at runtime;Code Smell;1
InterruptedException should not be ignored;Code Smell;Ternary operators should not be nested;Code Smell;1
Empty arrays and collections should be returned instead of null;Code Smell;Generic exceptions should never be thrown;Code Smell;1
Broken Hierarchy;Design Smell;Empty arrays and collections should be returned instead of null;Code Smell;1
Methods should not have too many parameters;Code Smell;Printf-style format strings should not lead to unexpected behavior at runtime;Code Smell;1
Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;Feature Concentration;Architectural Smell;1
Constant names should comply with a naming convention;Code Smell;Unnecessary imports should be removed;Code Smell;1
Unused private fields should be removed;Code Smell;switch statements should have at least 3 case clauses;Code Smell;1
Map.get and value test should be replaced with single method call;Code Smell;Printf-style format strings should be used correctly;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Jump statements should not be redundant;Code Smell;1
Collapsible if statements should be merged;Code Smell;Java 8 features should be preferred to Guava;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Unused local variables should be removed;Code Smell;1
Constant names should comply with a naming convention;Code Smell;Unused private fields should be removed;Code Smell;1
Boolean literals should not be redundant;Code Smell;Cyclically-dependent Modularization;Design Smell;1
Dead stores should be removed;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Overrides should match their parent class methods in synchronization;Code Smell;ThreadLocal variables should be cleaned up when no longer used;Code Smell;1
Cyclically-dependent Modularization;Design Smell;Fields in a Serializable class should either be transient or serializable;Code Smell;1
Resources should be closed;Code Smell;Wide Hierarchy;Design Smell;1
Nested blocks of code should not be left empty;Code Smell;StandardCharsets constants should be preferred;Code Smell;1
Deprecated code should be removed;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Conditionally executed blocks should be reachable;Code Smell;Cyclically-dependent Modularization;Design Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Methods and field names should not be the same or differ only by capitalization;Code Smell;1
Exceptions should be either logged or rethrown but not both;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
Deficient Encapsulation;Design Smell;Generic wildcard types should not be used in return parameters;Code Smell;1
Printf-style format strings should be used correctly;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
Strings should not be concatenated using '+' in a loop;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
Generic wildcard types should not be used in return parameters;Code Smell;Insufficient Modularization;Design Smell;1
StandardCharsets constants should be preferred;Code Smell;Utility classes should not have public constructors;Code Smell;1
Deficient Encapsulation;Design Smell;Using regular expressions is security-sensitive;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Subclasses that add fields should override equals;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Class names should comply with a naming convention;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;ThreadLocal.withInitial should be preferred;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Throwable and Error should not be caught;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Unused local variables should be removed;Code Smell;1
Inheritance tree of classes should not be too deep;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Resources should be closed;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Methods should not be empty;Code Smell;switch statements should have default clauses;Code Smell;1
Modifiers should be declared in the correct order;Code Smell;Utility classes should not have public constructors;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Boolean literals should not be redundant;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;1
Changing or bypassing accessibility is security-sensitive;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Nullness of parameters should be guaranteed;Code Smell;Utility classes should not have public constructors;Code Smell;1
Synchronized classes Vector  Hashtable  Stack and StringBuffer should not be used;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Null pointers should not be dereferenced;Code Smell;switch statements should have at least 3 case clauses;Code Smell;1
Deprecated code should be removed;Code Smell;Unused private methods should be removed;Code Smell;1
Externalizable classes should have no-arguments constructors;Code Smell;Insufficient Modularization;Design Smell;1
Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;Generic exceptions should never be thrown;Code Smell;1
Assignments should not be redundant;Code Smell;Insufficient Modularization;Design Smell;1
Ternary operators should not be nested;Code Smell;static base class members should not be accessed via derived types;Code Smell;1
Classes that override clone should be Cloneable and call super.clone();Code Smell;Methods should not have too many parameters;Code Smell;1
Classes that override clone should be Cloneable and call super.clone();Code Smell;Subclasses that add fields should override equals;Code Smell;1
Iterator.next() methods should throw NoSuchElementException;Code Smell;Redundant pairs of parentheses should be removed;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Java 8 features should be preferred to Guava;Code Smell;1
Preconditions and logging arguments should not require evaluation;Code Smell;Ternary operators should not be nested;Code Smell;1
Catches should be combined;Code Smell;Fields in a Serializable class should either be transient or serializable;Code Smell;1
Changing or bypassing accessibility is security-sensitive;Code Smell;Local variables should not shadow class fields;Code Smell;1
Map.get and value test should be replaced with single method call;Code Smell;Method names should comply with a naming convention;Code Smell;1
Feature Concentration;Architectural Smell;Unused type parameters should be removed;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;Static non-final field names should comply with a naming convention;Code Smell;1
Jump statements should not be redundant;Code Smell;Sections of code should not be commented out;Code Smell;1
Subclasses that add fields should override equals;Code Smell;equals(Object obj) and hashCode() should be overridden in pairs;Code Smell;1
Getters and setters should access the expected fields;Code Smell;Methods should not have identical implementations;Code Smell;1
Java 8 features should be preferred to Guava;Code Smell;Try-catch blocks should not be nested;Code Smell;1
Conditionally executed blocks should be reachable;Code Smell;Printf-style format strings should be used correctly;Code Smell;1
Null checks should not be used with instanceof;Code Smell;Type parameter names should comply with a naming convention;Code Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;InterruptedException should not be ignored;Code Smell;1
Subclasses that add fields should override equals;Code Smell;clone should not be overridden;Code Smell;1
Modifiers should be declared in the correct order;Code Smell;Printf-style format strings should be used correctly;Code Smell;1
Catches should be combined;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;1
Conditionally executed blocks should be reachable;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Changing or bypassing accessibility is security-sensitive;Code Smell;Collapsible if statements should be merged;Code Smell;1
Two branches in a conditional structure should not have exactly the same implementation;Code Smell;Unutilized Abstraction;Design Smell;1
An iteration on a Collection should be performed on the type handled by the Collection;Code Smell;Anonymous inner classes containing only one method should become lambdas;Code Smell;1
Deficient Encapsulation;Design Smell;Method names should comply with a naming convention;Code Smell;1
Nested blocks of code should not be left empty;Code Smell;Track uses of TODO tags;Code Smell;1
Child class fields should not shadow parent class fields;Code Smell;Strings should not be concatenated using '+' in a loop;Code Smell;1
Abstract classes without fields should be converted to interfaces;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;1
Boolean literals should not be redundant;Code Smell;Collapsible if statements should be merged;Code Smell;1
Public constants and fields initialized at declaration should be static final rather than merely final;Code Smell;Track uses of TODO tags;Code Smell;1
Collapsible if statements should be merged;Code Smell;Jump statements should not be redundant;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Method names should comply with a naming convention;Code Smell;1
Class variable fields should not have public accessibility;Code Smell;Static non-final field names should comply with a naming convention;Code Smell;1
Generic wildcard types should not be used in return parameters;Code Smell;Utility classes should not have public constructors;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;public static fields should be constant;Code Smell;1
Type parameter names should comply with a naming convention;Code Smell;Unused private fields should be removed;Code Smell;1
Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;Method names should comply with a naming convention;Code Smell;1
Generic wildcard types should not be used in return parameters;Code Smell;Unnecessary imports should be removed;Code Smell;1
Abstract classes without fields should be converted to interfaces;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Deficient Encapsulation;Design Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
Deprecated code should be removed;Code Smell;switch statements should have default clauses;Code Smell;1
Cyclically-dependent Modularization;Design Smell;Methods should not have identical implementations;Code Smell;1
Inheritance tree of classes should not be too deep;Code Smell;Unutilized Abstraction;Design Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
Collapsible if statements should be merged;Code Smell;Printf-style format strings should be used correctly;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Utility classes should not have public constructors;Code Smell;1
Empty arrays and collections should be returned instead of null;Code Smell;Null pointers should not be dereferenced;Code Smell;1
Child class fields should not shadow parent class fields;Code Smell;Conditionally executed blocks should be reachable;Code Smell;1
Child class fields should not shadow parent class fields;Code Smell;switch statements should have default clauses;Code Smell;1
Assignments should not be redundant;Code Smell;Unnecessary imports should be removed;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Maps with keys that are enum values should be replaced with EnumMap;Code Smell;1
Nested blocks of code should not be left empty;Code Smell;Unused private fields should be removed;Code Smell;1
@Deprecated code should not be used;Code Smell;StandardCharsets constants should be preferred;Code Smell;1
Empty arrays and collections should be returned instead of null;Code Smell;Methods should not be empty;Code Smell;1
Local variable and method parameter names should comply with a naming convention;Code Smell;Ternary operators should not be nested;Code Smell;1
Arrays should not be copied using loops;Code Smell;Collection.isEmpty() should be used to test for emptiness;Code Smell;1
Arrays should not be copied using loops;Code Smell;Wide Hierarchy;Design Smell;1
Sections of code should not be commented out;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;1
Ternary operators should not be nested;Code Smell;Utility classes should not have public constructors;Code Smell;1
Printf-style format strings should not lead to unexpected behavior at runtime;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Cyclically-dependent Modularization;Design Smell;private methods called only by inner classes should be moved to those classes;Code Smell;1
An iteration on a Collection should be performed on the type handled by the Collection;Code Smell;Collection.isEmpty() should be used to test for emptiness;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;write(byte[] int int) should be overridden;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Map.get and value test should be replaced with single method call;Code Smell;1
Constant names should comply with a naming convention;Code Smell;Deficient Encapsulation;Design Smell;1
Null pointers should not be dereferenced;Code Smell;Type parameter names should comply with a naming convention;Code Smell;1
Child class fields should not shadow parent class fields;Code Smell;Empty arrays and collections should be returned instead of null;Code Smell;1
Conditionally executed blocks should be reachable;Code Smell;Java 8 features should be preferred to Guava;Code Smell;1
Null checks should not be used with instanceof;Code Smell;Track uses of TODO tags;Code Smell;1
Methods should not be empty;Code Smell;Unused private fields should be removed;Code Smell;1
Deficient Encapsulation;Design Smell;Java 8 features should be preferred to Guava;Code Smell;1
Dead stores should be removed;Code Smell;Map.get and value test should be replaced with single method call;Code Smell;1
Externalizable classes should have no-arguments constructors;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;1
Classes from sun.* packages should not be used;Code Smell;Cyclically-dependent Modularization;Design Smell;1
Preconditions and logging arguments should not require evaluation;Code Smell;Static non-final field names should comply with a naming convention;Code Smell;1
Hashing data is security-sensitive;Code Smell;Sections of code should not be commented out;Code Smell;1
Feature Concentration;Architectural Smell;Jump statements should not be redundant;Code Smell;1
Redundant casts should not be used;Code Smell;Unused method parameters should be removed;Code Smell;1
An iteration on a Collection should be performed on the type handled by the Collection;Code Smell;Sections of code should not be commented out;Code Smell;1
Boolean literals should not be redundant;Code Smell;Local variables should not shadow class fields;Code Smell;1
Field names should comply with a naming convention;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Boolean literals should not be redundant;Code Smell;Static non-final field names should comply with a naming convention;Code Smell;1
Java 8 features should be preferred to Guava;Code Smell;Method names should comply with a naming convention;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Printf-style format strings should not lead to unexpected behavior at runtime;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Getters and setters should access the expected fields;Code Smell;1
Utility classes should not have public constructors;Code Smell;throws declarations should not be superfluous;Code Smell;1
Constant names should comply with a naming convention;Code Smell;Methods should not have too many parameters;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Redundant casts should not be used;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Methods should not be empty;Code Smell;1
Catches should be combined;Code Smell;Conditionally executed blocks should be reachable;Code Smell;1
Constant names should comply with a naming convention;Code Smell;Java 8 features should be preferred to Guava;Code Smell;1
Inheritance tree of classes should not be too deep;Code Smell;throws declarations should not be superfluous;Code Smell;1
Collapsible if statements should be merged;Code Smell;Cyclically-dependent Modularization;Design Smell;1
Classes from sun.* packages should not be used;Code Smell;String literals should not be duplicated;Code Smell;1
Deprecated code should be removed;Code Smell;String literals should not be duplicated;Code Smell;1
Broken Modularization;Design Smell;URIs should not be hardcoded;Code Smell;1
Feature Concentration;Architectural Smell;Standard outputs should not be used directly to log anything;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Unused private fields should be removed;Code Smell;1
Feature Concentration;Architectural Smell;Using command line arguments is security-sensitive;Code Smell;1
Boolean literals should not be redundant;Code Smell;Printf-style format strings should not lead to unexpected behavior at runtime;Code Smell;1
Class names should comply with a naming convention;Code Smell;Method names should comply with a naming convention;Code Smell;1
Class names should comply with a naming convention;Code Smell;Unnecessary imports should be removed;Code Smell;1
Boolean literals should not be redundant;Code Smell;Deprecated code should be removed;Code Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;Deficient Encapsulation;Design Smell;1
Unused private fields should be removed;Code Smell;switch statements should have default clauses;Code Smell;1
Classes should not be compared by name;Code Smell;Feature Concentration;Architectural Smell;1
Broken Hierarchy;Design Smell;Feature Envy;Design Smell;1
Deficient Encapsulation;Design Smell;toString() should never be called on a String object;Code Smell;1
Sections of code should not be commented out;Code Smell;Type parameter names should comply with a naming convention;Code Smell;1
Externalizable classes should have no-arguments constructors;Code Smell;Methods should not have too many parameters;Code Smell;1
Source files should not have any duplicated blocks;Code Smell;switch statements should have at least 3 case clauses;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;Deprecated code should be removed;Code Smell;1
Exceptions should be either logged or rethrown but not both;Code Smell;Utility classes should not have public constructors;Code Smell;1
Field names should comply with a naming convention;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Exceptions should be either logged or rethrown but not both;Code Smell;Inheritance tree of classes should not be too deep;Code Smell;1
Null checks should not be used with instanceof;Code Smell;Printf-style format strings should be used correctly;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Methods should not return constants;Code Smell;1
Arrays should not be copied using loops;Code Smell;Constant names should comply with a naming convention;Code Smell;1
Ternary operators should not be nested;Code Smell;Unused method parameters should be removed;Code Smell;1
Printf-style format strings should be used correctly;Code Smell;Wide Hierarchy;Design Smell;1
Generic exceptions should never be thrown;Code Smell;public static fields should be constant;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Hashing data is security-sensitive;Code Smell;1
Arrays should not be copied using loops;Code Smell;Sections of code should not be commented out;Code Smell;1
Java 8 features should be preferred to Guava;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
Feature Concentration;Architectural Smell;Weak SSL protocols should not be used;Code Smell;1
Conditionally executed blocks should be reachable;Code Smell;Method names should comply with a naming convention;Code Smell;1
Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
Exceptions should be either logged or rethrown but not both;Code Smell;Nested blocks of code should not be left empty;Code Smell;1
Deficient Encapsulation;Design Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Feature Concentration;Architectural Smell;equals(Object obj) and hashCode() should be overridden in pairs;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;Overriding methods should do more than simply call the same method in the super class;Code Smell;1
Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;Unnecessary imports should be removed;Code Smell;1
Exceptions should be either logged or rethrown but not both;Code Smell;Unused method parameters should be removed;Code Smell;1
Local variable and method parameter names should comply with a naming convention;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Constant names should comply with a naming convention;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;1
Multifaceted Abstraction;Design Smell;Mutable fields should not be public static;Code Smell;1
Constant names should comply with a naming convention;Code Smell;Insufficient Modularization;Design Smell;1
Class variable fields should not have public accessibility;Code Smell;Collapsible if statements should be merged;Code Smell;1
Local variables should not shadow class fields;Code Smell;Subclasses that add fields should override equals;Code Smell;1
Null checks should not be used with instanceof;Code Smell;Unused private fields should be removed;Code Smell;1
Private fields only used as local variables in methods should become local variables;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Feature Concentration;Architectural Smell;Redundant pairs of parentheses should be removed;Code Smell;1
Boolean literals should not be redundant;Code Smell;throws declarations should not be superfluous;Code Smell;1
Class names should comply with a naming convention;Code Smell;Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;1
Class variable fields should not have public accessibility;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;1
ThreadLocal variables should be cleaned up when no longer used;Code Smell;Utility classes should not have public constructors;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;1
Catches should be combined;Code Smell;Loggers should be named for their enclosing classes;Code Smell;1
An iteration on a Collection should be performed on the type handled by the Collection;Code Smell;Catches should be combined;Code Smell;1
Constant names should comply with a naming convention;Code Smell;Unused method parameters should be removed;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
Methods should not have too many parameters;Code Smell;equals(Object obj) and hashCode() should be overridden in pairs;Code Smell;1
Dead stores should be removed;Code Smell;Generic exceptions should never be thrown;Code Smell;1
String literals should not be duplicated;Code Smell;Try-catch blocks should not be nested;Code Smell;1
Class names should comply with a naming convention;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Constant names should comply with a naming convention;Code Smell;1
Local variables should not shadow class fields;Code Smell;throws declarations should not be superfluous;Code Smell;1
Class variable fields should not have public accessibility;Code Smell;Nested blocks of code should not be left empty;Code Smell;1
Source files should not have any duplicated blocks;Code Smell;Static non-final field names should comply with a naming convention;Code Smell;1
The diamond operator (<>) should be used;Code Smell;write(byte[] int int) should be overridden;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Sections of code should not be commented out;Code Smell;1
Nested blocks of code should not be left empty;Code Smell;String literals should not be duplicated;Code Smell;1
Cyclically-dependent Modularization;Design Smell;Sections of code should not be commented out;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Ternary operators should not be nested;Code Smell;1
Local variable and method parameter names should comply with a naming convention;Code Smell;Non-primitive fields should not be volatile;Code Smell;1
Two branches in a conditional structure should not have exactly the same implementation;Code Smell;Unused method parameters should be removed;Code Smell;1
Redundant pairs of parentheses should be removed;Code Smell;Unutilized Abstraction;Design Smell;1
Java 8 features should be preferred to Guava;Code Smell;Wide Hierarchy;Design Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Overrides should match their parent class methods in synchronization;Code Smell;1
Dead stores should be removed;Code Smell;URIs should not be hardcoded;Code Smell;1
Classes that override clone should be Cloneable and call super.clone();Code Smell;Insufficient Modularization;Design Smell;1
Boolean expressions should not be gratuitous;Code Smell;Class variable fields should not have public accessibility;Code Smell;1
Deficient Encapsulation;Design Smell;Null pointers should not be dereferenced;Code Smell;1
InterruptedException should not be ignored;Code Smell;Strings should not be concatenated using '+' in a loop;Code Smell;1
Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;Track uses of TODO tags;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;1
Changing or bypassing accessibility is security-sensitive;Code Smell;Utility classes should not have public constructors;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;public static fields should be constant;Code Smell;1
Empty arrays and collections should be returned instead of null;Code Smell;Weak SSL protocols should not be used;Code Smell;1
Class names should comply with a naming convention;Code Smell;switch statements should have default clauses;Code Smell;1
Public constants and fields initialized at declaration should be static final rather than merely final;Code Smell;Unused private fields should be removed;Code Smell;1
Deficient Encapsulation;Design Smell;Loggers should be named for their enclosing classes;Code Smell;1
Conditionally executed blocks should be reachable;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;String literals should not be duplicated;Code Smell;1
Methods should not be empty;Code Smell;String literals should not be duplicated;Code Smell;1
Broken Hierarchy;Design Smell;Multifaceted Abstraction;Design Smell;1
Cyclically-dependent Modularization;Design Smell;Field names should comply with a naming convention;Code Smell;1
Boolean literals should not be redundant;Code Smell;Conditionally executed blocks should be reachable;Code Smell;1
String literals should not be duplicated;Code Smell;private methods called only by inner classes should be moved to those classes;Code Smell;1
Cyclically-dependent Modularization;Design Smell;Java 8 features should be preferred to Guava;Code Smell;1
Printf-style format strings should be used correctly;Code Smell;Resources should be closed;Code Smell;1
Field names should comply with a naming convention;Code Smell;Ternary operators should not be nested;Code Smell;1
Generic exceptions should never be thrown;Code Smell;InterruptedException should not be ignored;Code Smell;1
@Deprecated code should not be used;Code Smell;Cyclically-dependent Modularization;Design Smell;1
Boolean expressions should not be gratuitous;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Exceptions should be either logged or rethrown but not both;Code Smell;Track uses of TODO tags;Code Smell;1
Catches should be combined;Code Smell;Externalizable classes should have no-arguments constructors;Code Smell;1
Deficient Encapsulation;Design Smell;Strings and Boxed types should be compared using equals();Code Smell;1
Redundant casts should not be used;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Local variables should not be declared and then immediately returned or thrown;Code Smell;switch statements should have at least 3 case clauses;Code Smell;1
Static non-final field names should comply with a naming convention;Code Smell;public static fields should be constant;Code Smell;1
entrySet() should be iterated when both the key and value are needed;Code Smell;switch statements should have default clauses;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;Strings should not be concatenated using '+' in a loop;Code Smell;1
Source files should not have any duplicated blocks;Code Smell;Ternary operators should not be nested;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;Overrides should match their parent class methods in synchronization;Code Smell;1
Jump statements should not be redundant;Code Smell;Unused method parameters should be removed;Code Smell;1
Methods should not be empty;Code Smell;Sections of code should not be commented out;Code Smell;1
Field names should comply with a naming convention;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;1
Arrays should not be copied using loops;Code Smell;Unused method parameters should be removed;Code Smell;1
Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;String literals should not be duplicated;Code Smell;1
Generic exceptions should never be thrown;Code Smell;notifyAll should be used;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Maps with keys that are enum values should be replaced with EnumMap;Code Smell;1
Collapsible if statements should be merged;Code Smell;Static non-final field names should comply with a naming convention;Code Smell;1
Public constants and fields initialized at declaration should be static final rather than merely final;Code Smell;Type parameter names should comply with a naming convention;Code Smell;1
Getters and setters should access the expected fields;Code Smell;Insufficient Modularization;Design Smell;1
Multifaceted Abstraction;Design Smell;Unused private fields should be removed;Code Smell;1
Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;Fields in a Serializable class should either be transient or serializable;Code Smell;1
Feature Concentration;Architectural Smell;Static non-final field names should comply with a naming convention;Code Smell;1
Empty arrays and collections should be returned instead of null;Code Smell;Printf-style format strings should be used correctly;Code Smell;1
Java 8 features should be preferred to Guava;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;1
Generic exceptions should never be thrown;Code Smell;Loggers should be named for their enclosing classes;Code Smell;1
Assignments should not be redundant;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;1
Overrides should match their parent class methods in synchronization;Code Smell;ThreadLocal.withInitial should be preferred;Code Smell;1
Changing or bypassing accessibility is security-sensitive;Code Smell;Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;1
Printf-style format strings should not lead to unexpected behavior at runtime;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Arrays should not be copied using loops;Code Smell;Null pointers should not be dereferenced;Code Smell;1
InterruptedException should not be ignored;Code Smell;Sections of code should not be commented out;Code Smell;1
Methods should not have too many parameters;Code Smell;StandardCharsets constants should be preferred;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Static non-final field names should comply with a naming convention;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Redundant pairs of parentheses should be removed;Code Smell;1
Resources should be closed;Code Smell;Unused method parameters should be removed;Code Smell;1
Deprecated code should be removed;Code Smell;Fields in a Serializable class should either be transient or serializable;Code Smell;1
Preconditions and logging arguments should not require evaluation;Code Smell;Unused private methods should be removed;Code Smell;1
Externalizable classes should have no-arguments constructors;Code Smell;Feature Concentration;Architectural Smell;1
Collapsible if statements should be merged;Code Smell;Throwable and Error should not be caught;Code Smell;1
Class names should comply with a naming convention;Code Smell;Track uses of TODO tags;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;Utility classes should not have public constructors;Code Smell;1
Catches should be combined;Code Smell;Resources should be closed;Code Smell;1
Dead stores should be removed;Code Smell;Deficient Encapsulation;Design Smell;1
@Deprecated code should not be used;Code Smell;Redundant casts should not be used;Code Smell;1
Track uses of TODO tags;Code Smell;switch statements should have default clauses;Code Smell;1
Feature Concentration;Architectural Smell;Throwable.printStackTrace(...) should not be called;Code Smell;1
Jump statements should not be redundant;Code Smell;Methods should not have too many parameters;Code Smell;1
Local variables should not be declared and then immediately returned or thrown;Code Smell;Utility classes should not have public constructors;Code Smell;1
Catches should be combined;Code Smell;switch statements should have default clauses;Code Smell;1
Feature Concentration;Architectural Smell;StandardCharsets constants should be preferred;Code Smell;1
The diamond operator (<>) should be used;Code Smell;Throwable and Error should not be caught;Code Smell;1
Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;Methods should not have too many parameters;Code Smell;1
Empty statements should be removed;Code Smell;Feature Concentration;Architectural Smell;1
Child class fields should not shadow parent class fields;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;1
Classes that override clone should be Cloneable and call super.clone();Code Smell;clone should not be overridden;Code Smell;1
Preconditions and logging arguments should not require evaluation;Code Smell;Wide Hierarchy;Design Smell;1
Map.get and value test should be replaced with single method call;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
Java 8 features should be preferred to Guava;Code Smell;Unused private fields should be removed;Code Smell;1
InterruptedException should not be ignored;Code Smell;Unused private methods should be removed;Code Smell;1
Classes should not be compared by name;Code Smell;Redundant casts should not be used;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Utility classes should not have public constructors;Code Smell;1
Local variables should not be declared and then immediately returned or thrown;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Deficient Encapsulation;Design Smell;static base class members should not be accessed via derived types;Code Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;Exceptions should be either logged or rethrown but not both;Code Smell;1
Empty arrays and collections should be returned instead of null;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Printf-style format strings should be used correctly;Code Smell;Unused local variables should be removed;Code Smell;1
Changing or bypassing accessibility is security-sensitive;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;Map.get and value test should be replaced with single method call;Code Smell;1
An iteration on a Collection should be performed on the type handled by the Collection;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Track uses of TODO tags;Code Smell;Using regular expressions is security-sensitive;Code Smell;1
Multiple variables should not be declared on the same line;Code Smell;Using regular expressions is security-sensitive;Code Smell;1
Local variable and method parameter names should comply with a naming convention;Code Smell;String literals should not be duplicated;Code Smell;1
String literals should not be duplicated;Code Smell;toString() should never be called on a String object;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Throwable and Error should not be caught;Code Smell;1
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;Try-catch blocks should not be nested;Code Smell;1
Ternary operators should not be nested;Code Smell;Unutilized Abstraction;Design Smell;1
Sections of code should not be commented out;Code Smell;ThreadLocal variables should be cleaned up when no longer used;Code Smell;1
Classes should not be compared by name;Code Smell;Map.get and value test should be replaced with single method call;Code Smell;1
Methods should not have too many parameters;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;1
Broken Hierarchy;Design Smell;Track uses of TODO tags;Code Smell;1
Overrides should match their parent class methods in synchronization;Code Smell;Sections of code should not be commented out;Code Smell;1
Null pointers should not be dereferenced;Code Smell;switch statements should have default clauses;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Collapsible if statements should be merged;Code Smell;1
Unnecessary Abstraction;Design Smell;Unnecessary imports should be removed;Code Smell;1
Class names should comply with a naming convention;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;1
Feature Concentration;Architectural Smell;private methods called only by inner classes should be moved to those classes;Code Smell;1
Methods should not have too many parameters;Code Smell;Short-circuit logic should be used in boolean contexts;Code Smell;1
Boolean literals should not be redundant;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Wide Hierarchy;Design Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
String literals should not be duplicated;Code Smell;Strings should not be concatenated using '+' in a loop;Code Smell;1
Java 8 features should be preferred to Guava;Code Smell;Modifiers should be declared in the correct order;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;switch statements should have default clauses;Code Smell;1
Jump statements should not be redundant;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Multiple variables should not be declared on the same line;Code Smell;1
Field names should comply with a naming convention;Code Smell;throws declarations should not be superfluous;Code Smell;1
Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
Constant names should comply with a naming convention;Code Smell;Track uses of TODO tags;Code Smell;1
Try-catch blocks should not be nested;Code Smell;switch statements should have default clauses;Code Smell;1
Deficient Encapsulation;Design Smell;Feature Envy;Design Smell;1
@Deprecated code should not be used;Code Smell;Sections of code should not be commented out;Code Smell;1
Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Generic wildcard types should not be used in return parameters;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
Wide Hierarchy;Design Smell;throws declarations should not be superfluous;Code Smell;1
@Deprecated code should not be used;Code Smell;Java 8 features should be preferred to Guava;Code Smell;1
Abstract methods should not be redundant;Code Smell;equals(Object obj) and hashCode() should be overridden in pairs;Code Smell;1
Null pointers should not be dereferenced;Code Smell;Try-catch blocks should not be nested;Code Smell;1
Null checks should not be used with instanceof;Code Smell;String literals should not be duplicated;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Map.get and value test should be replaced with single method call;Code Smell;1
Null checks should not be used with instanceof;Code Smell;Sections of code should not be commented out;Code Smell;1
Local variables should not be declared and then immediately returned or thrown;Code Smell;Printf-style format strings should not lead to unexpected behavior at runtime;Code Smell;1
Preconditions and logging arguments should not require evaluation;Code Smell;Redundant casts should not be used;Code Smell;1
@Deprecated code should not be used;Code Smell;Inheritance tree of classes should not be too deep;Code Smell;1
Methods should not have too many parameters;Code Smell;Type parameter names should comply with a naming convention;Code Smell;1
@Deprecated code should not be used;Code Smell;Deficient Encapsulation;Design Smell;1
Boolean expressions should not be gratuitous;Code Smell;Null pointers should not be dereferenced;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;Catches should be combined;Code Smell;1
Printf-style format strings should be used correctly;Code Smell;Static non-final field names should comply with a naming convention;Code Smell;1
String literals should not be duplicated;Code Smell;switch statements should have at least 3 case clauses;Code Smell;1
Collapsible if statements should be merged;Code Smell;Null checks should not be used with instanceof;Code Smell;1
Feature Concentration;Architectural Smell;Getters and setters should access the expected fields;Code Smell;1
Feature Concentration;Architectural Smell;Public constants and fields initialized at declaration should be static final rather than merely final;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Iterator.next() methods should throw NoSuchElementException;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Hashing data is security-sensitive;Code Smell;1
Throwable.printStackTrace(...) should not be called;Code Smell;Unutilized Abstraction;Design Smell;1
Deprecated code should be removed;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Cyclically-dependent Modularization;Design Smell;Jump statements should not be redundant;Code Smell;1
Class variable fields should not have public accessibility;Code Smell;Deficient Encapsulation;Design Smell;1
Deficient Encapsulation;Design Smell;Static non-final field names should comply with a naming convention;Code Smell;1
Feature Envy;Design Smell;Unused private fields should be removed;Code Smell;1
Hashing data is security-sensitive;Code Smell;ThreadLocal variables should be cleaned up when no longer used;Code Smell;1
Throwable and Error should not be caught;Code Smell;Unutilized Abstraction;Design Smell;1
Map.get and value test should be replaced with single method call;Code Smell;Unused local variables should be removed;Code Smell;1
Methods should not be empty;Code Smell;TrustManagers should not blindly accept any certificates;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;ThreadLocal variables should be cleaned up when no longer used;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Printf-style format strings should not lead to unexpected behavior at runtime;Code Smell;1
@Deprecated code should not be used;Code Smell;Unused private methods should be removed;Code Smell;1
Changing or bypassing accessibility is security-sensitive;Code Smell;Feature Concentration;Architectural Smell;1
Abstract methods should not be redundant;Code Smell;static base class members should not be accessed via derived types;Code Smell;1
InterruptedException should not be ignored;Code Smell;throws declarations should not be superfluous;Code Smell;1
Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;Utility classes should not have public constructors;Code Smell;1
Insufficient Modularization;Design Smell;Utility classes should not have public constructors;Code Smell;1
Classes from sun.* packages should not be used;Code Smell;Methods should not have too many parameters;Code Smell;1
Cyclically-dependent Modularization;Design Smell;Map.get and value test should be replaced with single method call;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;1
Boolean literals should not be redundant;Code Smell;Deficient Encapsulation;Design Smell;1
Methods should not be empty;Code Smell;Nested blocks of code should not be left empty;Code Smell;1
Catches should be combined;Code Smell;toString() should never be called on a String object;Code Smell;1
@Deprecated code should not be used;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
Broken Hierarchy;Design Smell;switch statements should have default clauses;Code Smell;1
Methods should not have too many parameters;Code Smell;Private fields only used as local variables in methods should become local variables;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;InterruptedException should not be ignored;Code Smell;1
Java 8 features should be preferred to Guava;Code Smell;Static non-final field names should comply with a naming convention;Code Smell;1
Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;1
Exceptions should be either logged or rethrown but not both;Code Smell;URIs should not be hardcoded;Code Smell;1
Local variables should not be declared and then immediately returned or thrown;Code Smell;Method names should comply with a naming convention;Code Smell;1
entrySet() should be iterated when both the key and value are needed;Code Smell;static base class members should not be accessed via derived types;Code Smell;1
Unused private fields should be removed;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Conditionally executed blocks should be reachable;Code Smell;Map.get and value test should be replaced with single method call;Code Smell;1
Abstract methods should not be redundant;Code Smell;Unnecessary imports should be removed;Code Smell;1
Catches should be combined;Code Smell;Null checks should not be used with instanceof;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Unused private fields should be removed;Code Smell;1
Arrays should not be copied using loops;Code Smell;throws declarations should not be superfluous;Code Smell;1
Collapsible if statements should be merged;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;1
Collapsible if statements should be merged;Code Smell;Unused local variables should be removed;Code Smell;1
Methods should not be empty;Code Smell;notifyAll should be used;Code Smell;1
Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;switch statements should have default clauses;Code Smell;1
Changing or bypassing accessibility is security-sensitive;Code Smell;Deficient Encapsulation;Design Smell;1
Broken Modularization;Design Smell;Constants should not be defined in interfaces;Code Smell;1
Overrides should match their parent class methods in synchronization;Code Smell;Utility classes should not have public constructors;Code Smell;1
Java 8 features should be preferred to Guava;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;1
Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;Feature Concentration;Architectural Smell;1
@Deprecated code should not be used;Code Smell;Nested blocks of code should not be left empty;Code Smell;1
Boolean literals should not be redundant;Code Smell;Nested blocks of code should not be left empty;Code Smell;1
InterruptedException should not be ignored;Code Smell;Unnecessary imports should be removed;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;1
Insufficient Modularization;Design Smell;Unused private methods should be removed;Code Smell;1
Broken Hierarchy;Design Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;1
Child class fields should not shadow parent class fields;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Classes should not be compared by name;Code Smell;Collapsible if statements should be merged;Code Smell;1
Methods should not have too many parameters;Code Smell;clone should not be overridden;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;Hashing data is security-sensitive;Code Smell;1
Child class fields should not shadow parent class fields;Code Smell;Collection.isEmpty() should be used to test for emptiness;Code Smell;1
Java 8 features should be preferred to Guava;Code Smell;Using regular expressions is security-sensitive;Code Smell;1
Boolean literals should not be redundant;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;1
Catches should be combined;Code Smell;Methods should not be empty;Code Smell;1
switch statements should have at least 3 case clauses;Code Smell;throws declarations should not be superfluous;Code Smell;1
Classes should not be compared by name;Code Smell;Generic exceptions should never be thrown;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Collapsible if statements should be merged;Code Smell;1
Maps with keys that are enum values should be replaced with EnumMap;Code Smell;Unutilized Abstraction;Design Smell;1
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;private methods called only by inner classes should be moved to those classes;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;String literals should not be duplicated;Code Smell;1
Java 8 features should be preferred to Guava;Code Smell;Local variables should not shadow class fields;Code Smell;1
Java 8 features should be preferred to Guava;Code Smell;switch statements should have default clauses;Code Smell;1
Insufficient Modularization;Design Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
InterruptedException should not be ignored;Code Smell;Unused private fields should be removed;Code Smell;1
Null pointers should not be dereferenced;Code Smell;public static fields should be constant;Code Smell;1
Printf-style format strings should be used correctly;Code Smell;switch statements should have default clauses;Code Smell;1
Using Sockets is security-sensitive;Code Smell;Weak SSL protocols should not be used;Code Smell;1
ThreadLocal.withInitial should be preferred;Code Smell;Utility classes should not have public constructors;Code Smell;1
@Deprecated code should not be used;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;1
Generic exceptions should never be thrown;Code Smell;static base class members should not be accessed via derived types;Code Smell;1
Classes from sun.* packages should not be used;Code Smell;The diamond operator (<>) should be used;Code Smell;1
The diamond operator (<>) should be used;Code Smell;clone should not be overridden;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;static base class members should not be accessed via derived types;Code Smell;1
Classes should not be compared by name;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;ThreadLocal variables should be cleaned up when no longer used;Code Smell;1
Local variable and method parameter names should comply with a naming convention;Code Smell;Map.get and value test should be replaced with single method call;Code Smell;1
Static non-final field names should comply with a naming convention;Code Smell;Using regular expressions is security-sensitive;Code Smell;1
Classes should not be compared by name;Code Smell;Unused method parameters should be removed;Code Smell;1
Methods and field names should not be the same or differ only by capitalization;Code Smell;String literals should not be duplicated;Code Smell;1
Null pointers should not be dereferenced;Code Smell;Static non-final field names should comply with a naming convention;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Printf-style format strings should be used correctly;Code Smell;1
Methods should not return constants;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Collapsible if statements should be merged;Code Smell;String literals should not be duplicated;Code Smell;1
Child class fields should not shadow parent class fields;Code Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Printf-style format strings should not lead to unexpected behavior at runtime;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Arrays should not be copied using loops;Code Smell;Printf-style format strings should be used correctly;Code Smell;1
Iterator.next() methods should throw NoSuchElementException;Code Smell;Unutilized Abstraction;Design Smell;1
Generic exceptions should never be thrown;Code Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;1
Constant names should comply with a naming convention;Code Smell;throws declarations should not be superfluous;Code Smell;1
Empty arrays and collections should be returned instead of null;Code Smell;Using Sockets is security-sensitive;Code Smell;1
Local variable and method parameter names should comply with a naming convention;Code Smell;Unused private fields should be removed;Code Smell;1
Methods should not have identical implementations;Code Smell;Unutilized Abstraction;Design Smell;1
Cyclically-dependent Modularization;Design Smell;Generic exceptions should never be thrown;Code Smell;1
Boolean literals should not be redundant;Code Smell;Collection.isEmpty() should be used to test for emptiness;Code Smell;1
Empty arrays and collections should be returned instead of null;Code Smell;Ternary operators should not be nested;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;InterruptedException should not be ignored;Code Smell;1
The diamond operator (<>) should be used;Code Smell;private methods called only by inner classes should be moved to those classes;Code Smell;1
Printf-style format strings should be used correctly;Code Smell;Unused private fields should be removed;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Collection.isEmpty() should be used to test for emptiness;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Modifiers should be declared in the correct order;Code Smell;1
Insufficient Modularization;Design Smell;Strings should not be concatenated using '+' in a loop;Code Smell;1
Null checks should not be used with instanceof;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
Boolean literals should not be redundant;Code Smell;Map.get and value test should be replaced with single method call;Code Smell;1
Hashing data is security-sensitive;Code Smell;Utility classes should not have public constructors;Code Smell;1
Redundant casts should not be used;Code Smell;throws declarations should not be superfluous;Code Smell;1
Assignments should not be redundant;Code Smell;Feature Concentration;Architectural Smell;1
Printf-style format strings should be used correctly;Code Smell;static base class members should not be accessed via derived types;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Classes that override clone should be Cloneable and call super.clone();Code Smell;1
Nullness of parameters should be guaranteed;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Unnecessary imports should be removed;Code Smell;toString() should never be called on a String object;Code Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
An iteration on a Collection should be performed on the type handled by the Collection;Code Smell;Java 8 features should be preferred to Guava;Code Smell;1
Map.get and value test should be replaced with single method call;Code Smell;switch statements should have default clauses;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;Methods should not have too many parameters;Code Smell;1
Boolean literals should not be redundant;Code Smell;switch statements should have default clauses;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Catches should be combined;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Loggers should be named for their enclosing classes;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Unused private methods should be removed;Code Smell;1
@Deprecated code should not be used;Code Smell;Empty arrays and collections should be returned instead of null;Code Smell;1
Insufficient Modularization;Design Smell;Maps with keys that are enum values should be replaced with EnumMap;Code Smell;1
Conditionally executed blocks should be reachable;Code Smell;Methods should not be empty;Code Smell;1
Map.get and value test should be replaced with single method call;Code Smell;Methods should not be empty;Code Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;Local variables should not shadow class fields;Code Smell;1
Assignments should not be redundant;Code Smell;Catches should be combined;Code Smell;1
Getters and setters should access the expected fields;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Dead stores should be removed;Code Smell;Printf-style format strings should be used correctly;Code Smell;1
Classes from sun.* packages should not be used;Code Smell;Generic exceptions should never be thrown;Code Smell;1
Local variables should not be declared and then immediately returned or thrown;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
Try-catch blocks should not be nested;Code Smell;Unnecessary imports should be removed;Code Smell;1
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;Ternary operators should not be nested;Code Smell;1
Iterator.next() methods should throw NoSuchElementException;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;Generic exceptions should never be thrown;Code Smell;1
Modifiers should be declared in the correct order;Code Smell;ThreadLocal variables should be cleaned up when no longer used;Code Smell;1
StandardCharsets constants should be preferred;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Boolean literals should not be redundant;Code Smell;Methods should not be empty;Code Smell;1
Field names should comply with a naming convention;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Collapsible if statements should be merged;Code Smell;Dead stores should be removed;Code Smell;1
Methods should not have too many parameters;Code Smell;Unused private methods should be removed;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;Child class fields should not shadow parent class fields;Code Smell;1
Getters and setters should access the expected fields;Code Smell;Unutilized Abstraction;Design Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Empty arrays and collections should be returned instead of null;Code Smell;1
Local variables should not be declared and then immediately returned or thrown;Code Smell;Local variables should not shadow class fields;Code Smell;1
Deprecated code should be removed;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Resources should be closed;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
Broken Hierarchy;Design Smell;Null pointers should not be dereferenced;Code Smell;1
Static non-final field names should comply with a naming convention;Code Smell;Unnecessary imports should be removed;Code Smell;1
Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;toString() should never be called on a String object;Code Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;1
Sections of code should not be commented out;Code Smell;String literals should not be duplicated;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;Unnecessary imports should be removed;Code Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;Empty arrays and collections should be returned instead of null;Code Smell;1
Strings should not be concatenated using '+' in a loop;Code Smell;switch statements should have default clauses;Code Smell;1
Conditionally executed blocks should be reachable;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Broken Hierarchy;Design Smell;Loops should not contain more than a single break or continue statement;Code Smell;1
Methods should not have too many parameters;Code Smell;Wide Hierarchy;Design Smell;1
Methods and field names should not be the same or differ only by capitalization;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Printf-style format strings should be used correctly;Code Smell;1
Arrays should not be copied using loops;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Externalizable classes should have no-arguments constructors;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Utility classes should not have public constructors;Code Smell;1
Insufficient Modularization;Design Smell;Private fields only used as local variables in methods should become local variables;Code Smell;1
Class names should comply with a naming convention;Code Smell;Feature Concentration;Architectural Smell;1
Classes from sun.* packages should not be used;Code Smell;Track uses of TODO tags;Code Smell;1
Local variables should not be declared and then immediately returned or thrown;Code Smell;Sections of code should not be commented out;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;Track uses of TODO tags;Code Smell;1
Collapsible if statements should be merged;Code Smell;public static fields should be constant;Code Smell;1
Cyclically-dependent Modularization;Design Smell;Public constants and fields initialized at declaration should be static final rather than merely final;Code Smell;1
Cyclically-dependent Modularization;Design Smell;Unused method parameters should be removed;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Deficient Encapsulation;Design Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;Ternary operators should not be nested;Code Smell;1
Deprecated code should be removed;Code Smell;Methods should not have identical implementations;Code Smell;1
Local variables should not be declared and then immediately returned or thrown;Code Smell;Private fields only used as local variables in methods should become local variables;Code Smell;1
Track uses of TODO tags;Code Smell;Type parameter names should comply with a naming convention;Code Smell;1
Nested blocks of code should not be left empty;Code Smell;Static non-final field names should comply with a naming convention;Code Smell;1
Local variable and method parameter names should comply with a naming convention;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;1
Methods should not be empty;Code Smell;Using Sockets is security-sensitive;Code Smell;1
Broken Hierarchy;Design Smell;Class names should comply with a naming convention;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Broken Hierarchy;Design Smell;1
Methods should not return constants;Code Smell;Unutilized Abstraction;Design Smell;1
Methods should not be empty;Code Smell;Ternary operators should not be nested;Code Smell;1
Abstract classes without fields should be converted to interfaces;Code Smell;Methods should not have too many parameters;Code Smell;1
Catches should be combined;Code Smell;Jump statements should not be redundant;Code Smell;1
Local variables should not shadow class fields;Code Smell;private methods called only by inner classes should be moved to those classes;Code Smell;1
Methods should not have too many parameters;Code Smell;Redundant casts should not be used;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Arrays should not be copied using loops;Code Smell;1
Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;Methods should not have identical implementations;Code Smell;1
Feature Concentration;Architectural Smell;Hashing data is security-sensitive;Code Smell;1
@Deprecated code should not be used;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;1
Resources should be closed;Code Smell;Utility classes should not have public constructors;Code Smell;1
Generic wildcard types should not be used in return parameters;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Source files should not have any duplicated blocks;Code Smell;Try-catch blocks should not be nested;Code Smell;1
Field names should comply with a naming convention;Code Smell;Unused private fields should be removed;Code Smell;1
Jump statements should not be redundant;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Overrides should match their parent class methods in synchronization;Code Smell;1
Null pointers should not be dereferenced;Code Smell;Short-circuit logic should be used in boolean contexts;Code Smell;1
Local variables should not be declared and then immediately returned or thrown;Code Smell;Loggers should be named for their enclosing classes;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Boxed Boolean should be avoided in boolean expressions;Code Smell;1
Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Constant names should comply with a naming convention;Code Smell;Field names should comply with a naming convention;Code Smell;1
Local variable and method parameter names should comply with a naming convention;Code Smell;Null pointers should not be dereferenced;Code Smell;1
Catches should be combined;Code Smell;StandardCharsets constants should be preferred;Code Smell;1
Methods should not have too many parameters;Code Smell;Strings should not be concatenated using '+' in a loop;Code Smell;1
TrustManagers should not blindly accept any certificates;Code Smell;Weak SSL protocols should not be used;Code Smell;1
Map.get and value test should be replaced with single method call;Code Smell;Redundant casts should not be used;Code Smell;1
Strings should not be concatenated using '+' in a loop;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Feature Concentration;Architectural Smell;Strings should not be concatenated using '+' in a loop;Code Smell;1
Strings should not be concatenated using '+' in a loop;Code Smell;Unutilized Abstraction;Design Smell;1
InterruptedException should not be ignored;Code Smell;switch statements should have default clauses;Code Smell;1
Abstract classes without fields should be converted to interfaces;Code Smell;Track uses of TODO tags;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;clone should not be overridden;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Nullness of parameters should be guaranteed;Code Smell;1
Classes from sun.* packages should not be used;Code Smell;Insufficient Modularization;Design Smell;1
StandardCharsets constants should be preferred;Code Smell;Track uses of TODO tags;Code Smell;1
Mutable fields should not be public static;Code Smell;Unused private fields should be removed;Code Smell;1
Subclasses that add fields should override equals;Code Smell;Track uses of TODO tags;Code Smell;1
Class variable fields should not have public accessibility;Code Smell;public static fields should be constant;Code Smell;1
Exceptions should be either logged or rethrown but not both;Code Smell;Unutilized Abstraction;Design Smell;1
Constant names should comply with a naming convention;Code Smell;Sections of code should not be commented out;Code Smell;1
Constant names should comply with a naming convention;Code Smell;Feature Concentration;Architectural Smell;1
Deficient Encapsulation;Design Smell;public static fields should be constant;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Resources should be closed;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Using regular expressions is security-sensitive;Code Smell;1
Deficient Encapsulation;Design Smell;InterruptedException should not be ignored;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;Exceptions should be either logged or rethrown but not both;Code Smell;1
Feature Concentration;Architectural Smell;URIs should not be hardcoded;Code Smell;1
Deficient Encapsulation;Design Smell;Maps with keys that are enum values should be replaced with EnumMap;Code Smell;1
Track uses of TODO tags;Code Smell;private methods called only by inner classes should be moved to those classes;Code Smell;1
Type parameter names should comply with a naming convention;Code Smell;throws declarations should not be superfluous;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Assignments should not be redundant;Code Smell;1
Field names should comply with a naming convention;Code Smell;Type parameter names should comply with a naming convention;Code Smell;1
Changing or bypassing accessibility is security-sensitive;Code Smell;Track uses of TODO tags;Code Smell;1
Field names should comply with a naming convention;Code Smell;Utility classes should not have public constructors;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;1
Deficient Encapsulation;Design Smell;Unused local variables should be removed;Code Smell;1
Constant names should comply with a naming convention;Code Smell;Wide Hierarchy;Design Smell;1
Modifiers should be declared in the correct order;Code Smell;Track uses of TODO tags;Code Smell;1
Deprecated code should be removed;Code Smell;Synchronized classes Vector  Hashtable  Stack and StringBuffer should not be used;Code Smell;1
Empty arrays and collections should be returned instead of null;Code Smell;Local variables should not shadow class fields;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Private fields only used as local variables in methods should become local variables;Code Smell;1
Nested blocks of code should not be left empty;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Nested blocks of code should not be left empty;Code Smell;URIs should not be hardcoded;Code Smell;1
Empty arrays and collections should be returned instead of null;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
Child class fields should not shadow parent class fields;Code Smell;Deprecated code should be removed;Code Smell;1
Jump statements should not be redundant;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;1
String literals should not be duplicated;Code Smell;Unused private methods should be removed;Code Smell;1
Source files should not have any duplicated blocks;Code Smell;equals(Object obj) and hashCode() should be overridden in pairs;Code Smell;1
Methods should not have too many parameters;Code Smell;switch statements should have at least 3 case clauses;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Nested blocks of code should not be left empty;Code Smell;1
The diamond operator (<>) should be used;Code Smell;Using regular expressions is security-sensitive;Code Smell;1
Field names should comply with a naming convention;Code Smell;Insufficient Modularization;Design Smell;1
Hashing data is security-sensitive;Code Smell;Overrides should match their parent class methods in synchronization;Code Smell;1
Classes should not be compared by name;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Classes should not be compared by name;Code Smell;Null pointers should not be dereferenced;Code Smell;1
Boolean literals should not be redundant;Code Smell;Unused private fields should be removed;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;Methods and field names should not be the same or differ only by capitalization;Code Smell;1
Loggers should be named for their enclosing classes;Code Smell;Throwable and Error should not be caught;Code Smell;1
Feature Envy;Design Smell;Local variables should not shadow class fields;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;1
Try-catch blocks should not be nested;Code Smell;Unused private fields should be removed;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Child class fields should not shadow parent class fields;Code Smell;Cyclically-dependent Modularization;Design Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;Unused local variables should be removed;Code Smell;1
Cyclically-dependent Modularization;Design Smell;Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;1
Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Classes from sun.* packages should not be used;Code Smell;StandardCharsets constants should be preferred;Code Smell;1
Method names should comply with a naming convention;Code Smell;Unutilized Abstraction;Design Smell;1
Arrays should not be copied using loops;Code Smell;Resources should be closed;Code Smell;1
Field names should comply with a naming convention;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;1
Nullness of parameters should be guaranteed;Code Smell;Unutilized Abstraction;Design Smell;1
Field names should comply with a naming convention;Code Smell;Unused method parameters should be removed;Code Smell;1
Track uses of TODO tags;Code Smell;Unused private fields should be removed;Code Smell;1
Local variables should not be declared and then immediately returned or thrown;Code Smell;String literals should not be duplicated;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;1
Cyclically-dependent Modularization;Design Smell;InterruptedException should not be ignored;Code Smell;1
Preconditions and logging arguments should not require evaluation;Code Smell;Unused private fields should be removed;Code Smell;1
Type parameter names should comply with a naming convention;Code Smell;switch statements should have at least 3 case clauses;Code Smell;1
Constant names should comply with a naming convention;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Externalizable classes should have no-arguments constructors;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Boolean expressions should not be gratuitous;Code Smell;1
@Deprecated code should not be used;Code Smell;Collapsible if statements should be merged;Code Smell;1
Collapsible if statements should be merged;Code Smell;Loggers should be named for their enclosing classes;Code Smell;1
Multifaceted Abstraction;Design Smell;String literals should not be duplicated;Code Smell;1
Conditionally executed blocks should be reachable;Code Smell;InterruptedException should not be ignored;Code Smell;1
Broken Hierarchy;Design Smell;Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;Printf-style format strings should not lead to unexpected behavior at runtime;Code Smell;1
Methods and field names should not be the same or differ only by capitalization;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Hashing data is security-sensitive;Code Smell;ThreadLocal.withInitial should be preferred;Code Smell;1
Generic wildcard types should not be used in return parameters;Code Smell;The diamond operator (<>) should be used;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Method names should comply with a naming convention;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;1
Sections of code should not be commented out;Code Smell;Wide Hierarchy;Design Smell;1
String literals should not be duplicated;Code Smell;Unutilized Abstraction;Design Smell;1
Printf-style format strings should not lead to unexpected behavior at runtime;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;1
Catches should be combined;Code Smell;Unused private fields should be removed;Code Smell;1
Deficient Encapsulation;Design Smell;Sections of code should not be commented out;Code Smell;1
Methods should not be empty;Code Smell;Weak SSL protocols should not be used;Code Smell;1
Nullness of parameters should be guaranteed;Code Smell;Unnecessary imports should be removed;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Null checks should not be used with instanceof;Code Smell;1
An iteration on a Collection should be performed on the type handled by the Collection;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;1
Class variable fields should not have public accessibility;Code Smell;Generic exceptions should never be thrown;Code Smell;1
Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;Unutilized Abstraction;Design Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Redundant casts should not be used;Code Smell;1
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;Static non-final field names should comply with a naming convention;Code Smell;1
Try-catch blocks should not be nested;Code Smell;Unutilized Abstraction;Design Smell;1
Methods should not have identical implementations;Code Smell;Subclasses that add fields should override equals;Code Smell;1
Field names should comply with a naming convention;Code Smell;Resources should be closed;Code Smell;1
Source files should not have any duplicated blocks;Code Smell;Using regular expressions is security-sensitive;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Methods should not have too many parameters;Code Smell;1
String literals should not be duplicated;Code Smell;Ternary operators should not be nested;Code Smell;1
Exceptions should be either logged or rethrown but not both;Code Smell;Unused local variables should be removed;Code Smell;1
Field names should comply with a naming convention;Code Smell;Methods should not have too many parameters;Code Smell;1
Arrays should not be copied using loops;Code Smell;Java 8 features should be preferred to Guava;Code Smell;1
Java 8 features should be preferred to Guava;Code Smell;Maps with keys that are enum values should be replaced with EnumMap;Code Smell;1
Deficient Encapsulation;Design Smell;Loops should not contain more than a single break or continue statement;Code Smell;1
Methods should not be empty;Code Smell;Printf-style format strings should be used correctly;Code Smell;1
Empty arrays and collections should be returned instead of null;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;1
Unutilized Abstraction;Design Smell;equals(Object obj) and hashCode() should be overridden in pairs;Code Smell;1
Using regular expressions is security-sensitive;Code Smell;throws declarations should not be superfluous;Code Smell;1
Field names should comply with a naming convention;Code Smell;Java 8 features should be preferred to Guava;Code Smell;1
InterruptedException should not be ignored;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Try-catch blocks should not be nested;Code Smell;1
Sections of code should not be commented out;Code Smell;ThreadLocal.withInitial should be preferred;Code Smell;1
Broken Hierarchy;Design Smell;Method names should comply with a naming convention;Code Smell;1
Modifiers should be declared in the correct order;Code Smell;Unused private fields should be removed;Code Smell;1
Class variable fields should not have public accessibility;Code Smell;Null pointers should not be dereferenced;Code Smell;1
Hashing data is security-sensitive;Code Smell;Modifiers should be declared in the correct order;Code Smell;1
Redundant pairs of parentheses should be removed;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Strings should not be concatenated using '+' in a loop;Code Smell;Unnecessary imports should be removed;Code Smell;1
Deprecated code should be removed;Code Smell;InterruptedException should not be ignored;Code Smell;1
Map.get and value test should be replaced with single method call;Code Smell;throws declarations should not be superfluous;Code Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;Subclasses that add fields should override equals;Code Smell;1
Abstract methods should not be redundant;Code Smell;Generic exceptions should never be thrown;Code Smell;1
Classes should not be compared by name;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Map.get and value test should be replaced with single method call;Code Smell;static base class members should not be accessed via derived types;Code Smell;1
Conditionally executed blocks should be reachable;Code Smell;Empty arrays and collections should be returned instead of null;Code Smell;1
Source files should not have any duplicated blocks;Code Smell;Unused method parameters should be removed;Code Smell;1
Local variables should not shadow class fields;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Strings and Boxed types should be compared using equals();Code Smell;Unnecessary imports should be removed;Code Smell;1
Private fields only used as local variables in methods should become local variables;Code Smell;Unused private fields should be removed;Code Smell;1
Externalizable classes should have no-arguments constructors;Code Smell;Subclasses that add fields should override equals;Code Smell;1
Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;Insufficient Modularization;Design Smell;1
An iteration on a Collection should be performed on the type handled by the Collection;Code Smell;Unused method parameters should be removed;Code Smell;1
Map.get and value test should be replaced with single method call;Code Smell;Unused private fields should be removed;Code Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;Method names should comply with a naming convention;Code Smell;1
Method names should comply with a naming convention;Code Smell;Methods should not be empty;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;private methods called only by inner classes should be moved to those classes;Code Smell;1
Assignments should not be redundant;Code Smell;Exceptions should be either logged or rethrown but not both;Code Smell;1
Strings and Boxed types should be compared using equals();Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Strings and Boxed types should be compared using equals();Code Smell;Unused private fields should be removed;Code Smell;1
Feature Envy;Design Smell;Methods should not have too many parameters;Code Smell;1
Nested blocks of code should not be left empty;Code Smell;Printf-style format strings should not lead to unexpected behavior at runtime;Code Smell;1
Insufficient Modularization;Design Smell;Using regular expressions is security-sensitive;Code Smell;1
Insufficient Modularization;Design Smell;StandardCharsets constants should be preferred;Code Smell;1
Constant names should comply with a naming convention;Code Smell;Resources should be closed;Code Smell;1
Child class fields should not shadow parent class fields;Code Smell;Deficient Encapsulation;Design Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Strings should not be concatenated using '+' in a loop;Code Smell;1
Empty arrays and collections should be returned instead of null;Code Smell;TrustManagers should not blindly accept any certificates;Code Smell;1
Java 8 features should be preferred to Guava;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Resources should be closed;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Type parameter names should comply with a naming convention;Code Smell;1
Boolean literals should not be redundant;Code Smell;Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;1
Generic exceptions should never be thrown;Code Smell;Jump statements should not be redundant;Code Smell;1
An iteration on a Collection should be performed on the type handled by the Collection;Code Smell;Collapsible if statements should be merged;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Generic wildcard types should not be used in return parameters;Code Smell;1
Nested blocks of code should not be left empty;Code Smell;Unused local variables should be removed;Code Smell;1
Abstract classes without fields should be converted to interfaces;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Deprecated code should be removed;Code Smell;1
The diamond operator (<>) should be used;Code Smell;URIs should not be hardcoded;Code Smell;1
Unutilized Abstraction;Design Smell;switch statements should have at least 3 case clauses;Code Smell;1
StandardCharsets constants should be preferred;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
InterruptedException should not be ignored;Code Smell;String literals should not be duplicated;Code Smell;1
Maps with keys that are enum values should be replaced with EnumMap;Code Smell;Unused private fields should be removed;Code Smell;1
URIs should not be hardcoded;Code Smell;Unused local variables should be removed;Code Smell;1
Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;throws declarations should not be superfluous;Code Smell;1
@Deprecated code should not be used;Code Smell;Methods should not have identical implementations;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;switch statements should have default clauses;Code Smell;1
Local variables should not shadow class fields;Code Smell;Unused private fields should be removed;Code Smell;1
Two branches in a conditional structure should not have exactly the same implementation;Code Smell;Unnecessary imports should be removed;Code Smell;1
@Deprecated code should not be used;Code Smell;Resources should be closed;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Methods should not be empty;Code Smell;1
Class names should comply with a naming convention;Code Smell;Cyclically-dependent Modularization;Design Smell;1
Preconditions and logging arguments should not require evaluation;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
Deprecated code should be removed;Code Smell;Local variables should not shadow class fields;Code Smell;1
Deficient Encapsulation;Design Smell;Mutable fields should not be public static;Code Smell;1
An iteration on a Collection should be performed on the type handled by the Collection;Code Smell;Methods should not have too many parameters;Code Smell;1
Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;Track uses of TODO tags;Code Smell;1
@Deprecated code should not be used;Code Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Modifiers should be declared in the correct order;Code Smell;1
Collapsible if statements should be merged;Code Smell;Map.get and value test should be replaced with single method call;Code Smell;1
Deprecated code should be removed;Code Smell;Track uses of TODO tags;Code Smell;1
Constants should not be defined in interfaces;Code Smell;String literals should not be duplicated;Code Smell;1
Loggers should be named for their enclosing classes;Code Smell;Modifiers should be declared in the correct order;Code Smell;1
Boolean literals should not be redundant;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;static base class members should not be accessed via derived types;Code Smell;1
Sections of code should not be commented out;Code Smell;static base class members should not be accessed via derived types;Code Smell;1
Feature Concentration;Architectural Smell;Using Sockets is security-sensitive;Code Smell;1
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;Subclasses that add fields should override equals;Code Smell;1
Methods should not have identical implementations;Code Smell;Unnecessary imports should be removed;Code Smell;1
@Deprecated code should not be used;Code Smell;switch statements should have default clauses;Code Smell;1
Constant names should comply with a naming convention;Code Smell;The diamond operator (<>) should be used;Code Smell;1
An iteration on a Collection should be performed on the type handled by the Collection;Code Smell;Generic exceptions should never be thrown;Code Smell;1
Local variable and method parameter names should comply with a naming convention;Code Smell;Methods should not be empty;Code Smell;1
Unnecessary imports should be removed;Code Smell;Unused private methods should be removed;Code Smell;1
@Deprecated code should not be used;Code Smell;Exceptions should be either logged or rethrown but not both;Code Smell;1
Null pointers should not be dereferenced;Code Smell;Utility classes should not have public constructors;Code Smell;1
Child class fields should not shadow parent class fields;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Jump statements should not be redundant;Code Smell;Track uses of TODO tags;Code Smell;1
Cyclically-dependent Modularization;Design Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
InterruptedException should not be ignored;Code Smell;Unutilized Abstraction;Design Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Unused private methods should be removed;Code Smell;1
Multifaceted Abstraction;Design Smell;Unused method parameters should be removed;Code Smell;1
Two branches in a conditional structure should not have exactly the same implementation;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Feature Concentration;Architectural Smell;hashCode and toString should not be called on array instances;Code Smell;1
Sections of code should not be commented out;Code Smell;Unused private fields should be removed;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Wide Hierarchy;Design Smell;1
String literals should not be duplicated;Code Smell;Utility classes should not have public constructors;Code Smell;1
Exceptions should be either logged or rethrown but not both;Code Smell;Type parameter names should comply with a naming convention;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;Unused private methods should be removed;Code Smell;1
Map.get and value test should be replaced with single method call;Code Smell;String literals should not be duplicated;Code Smell;1
Overriding methods should do more than simply call the same method in the super class;Code Smell;Subclasses that add fields should override equals;Code Smell;1
Preconditions and logging arguments should not require evaluation;Code Smell;Strings should not be concatenated using '+' in a loop;Code Smell;1
Child class fields should not shadow parent class fields;Code Smell;Ternary operators should not be nested;Code Smell;1
Constants should not be defined in interfaces;Code Smell;URIs should not be hardcoded;Code Smell;1
Dead stores should be removed;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
Null pointers should not be dereferenced;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;Two branches in a conditional structure should not have exactly the same implementation;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;1
Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;Local variables should not shadow class fields;Code Smell;1
@Deprecated code should not be used;Code Smell;Strings should not be concatenated using '+' in a loop;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Short-circuit logic should be used in boolean contexts;Code Smell;1
Local variable and method parameter names should comply with a naming convention;Code Smell;Try-catch blocks should not be nested;Code Smell;1
Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;Redundant pairs of parentheses should be removed;Code Smell;1
Methods should not be empty;Code Smell;Multifaceted Abstraction;Design Smell;1
Printf-style format strings should be used correctly;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Collection.isEmpty() should be used to test for emptiness;Code Smell;1
Feature Concentration;Architectural Smell;Methods should not return constants;Code Smell;1
Conditionally executed blocks should be reachable;Code Smell;Unused method parameters should be removed;Code Smell;1
Sections of code should not be commented out;Code Smell;Unnecessary imports should be removed;Code Smell;1
Map.get and value test should be replaced with single method call;Code Smell;Ternary operators should not be nested;Code Smell;1
Insufficient Modularization;Design Smell;Resources should be closed;Code Smell;1
Empty statements should be removed;Code Smell;Unutilized Abstraction;Design Smell;1
Field names should comply with a naming convention;Code Smell;Non-primitive fields should not be volatile;Code Smell;1
entrySet() should be iterated when both the key and value are needed;Code Smell;write(byte[] int int) should be overridden;Code Smell;1
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;static base class members should not be accessed via derived types;Code Smell;1
Insufficient Modularization;Design Smell;Strings and Boxed types should be compared using equals();Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Modifiers should be declared in the correct order;Code Smell;1
Cyclically-dependent Modularization;Design Smell;Local variables should not shadow class fields;Code Smell;1
Declarations should use Java collection interfaces such as List rather than specific implementation classes such as LinkedList;Code Smell;Iterator.next() methods should throw NoSuchElementException;Code Smell;1
Short-circuit logic should be used in boolean contexts;Code Smell;Unnecessary imports should be removed;Code Smell;1
Boolean literals should not be redundant;Code Smell;Unutilized Abstraction;Design Smell;1
Local variables should not shadow class fields;Code Smell;String literals should not be duplicated;Code Smell;1
Boolean literals should not be redundant;Code Smell;Local variables should not be declared and then immediately returned or thrown;Code Smell;1
Abstract classes without fields should be converted to interfaces;Code Smell;Java 8 features should be preferred to Guava;Code Smell;1
Methods should not have too many parameters;Code Smell;Nullness of parameters should be guaranteed;Code Smell;1
Local variable and method parameter names should comply with a naming convention;Code Smell;Track uses of TODO tags;Code Smell;1
Unutilized Abstraction;Design Smell;write(byte[] int int) should be overridden;Code Smell;1
Redundant casts should not be used;Code Smell;Track uses of TODO tags;Code Smell;1
Class names should comply with a naming convention;Code Smell;Cognitive Complexity of methods should not be too high;Code Smell;1
Collapsible if statements should be merged;Code Smell;Redundant casts should not be used;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Static non-final field names should comply with a naming convention;Code Smell;1
Null pointers should not be dereferenced;Code Smell;Nullness of parameters should be guaranteed;Code Smell;1
Jump statements should not be redundant;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Null checks should not be used with instanceof;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Modifiers should be declared in the correct order;Code Smell;Overrides should match their parent class methods in synchronization;Code Smell;1
Strings should not be concatenated using '+' in a loop;Code Smell;Unused private methods should be removed;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;Boolean literals should not be redundant;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;throws declarations should not be superfluous;Code Smell;1
Broken Modularization;Design Smell;Feature Concentration;Architectural Smell;1
Unused private methods should be removed;Code Smell;switch statements should have default clauses;Code Smell;1
Cyclically-dependent Modularization;Design Smell;Empty arrays and collections should be returned instead of null;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Fields in a Serializable class should either be transient or serializable;Code Smell;1
Throwable.printStackTrace(...) should not be called;Code Smell;Utility classes should not have public constructors;Code Smell;1
Ternary operators should not be nested;Code Smell;Unnecessary imports should be removed;Code Smell;1
Local variables should not shadow class fields;Code Smell;Wide Hierarchy;Design Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Local variable and method parameter names should comply with a naming convention;Code Smell;1
Feature Concentration;Architectural Smell;TrustManagers should not blindly accept any certificates;Code Smell;1
Modifiers should be declared in the correct order;Code Smell;Sections of code should not be commented out;Code Smell;1
@Deprecated code should not be used;Code Smell;Fields in a Serializable class should either be transient or serializable;Code Smell;1
@Deprecated code should not be used;Code Smell;Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;1
Deprecated code should be removed;Code Smell;Unnecessary Abstraction;Design Smell;1
Broken Modularization;Design Smell;String literals should not be duplicated;Code Smell;1
Cyclically-dependent Modularization;Design Smell;Null pointers should not be dereferenced;Code Smell;1
Cyclically-dependent Modularization;Design Smell;switch statements should have default clauses;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;1
Unused method parameters should be removed;Code Smell;Wide Hierarchy;Design Smell;1
Arrays should not be copied using loops;Code Smell;Field names should comply with a naming convention;Code Smell;1
Dead stores should be removed;Code Smell;Exceptions should be either logged or rethrown but not both;Code Smell;1
Field names should comply with a naming convention;Code Smell;Printf-style format strings should be used correctly;Code Smell;1
Child class fields should not shadow parent class fields;Code Smell;Unused private methods should be removed;Code Smell;1
The diamond operator (<>) should be used;Code Smell;notifyAll should be used;Code Smell;1
TrustManagers should not blindly accept any certificates;Code Smell;Using Sockets is security-sensitive;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Loggers should be named for their enclosing classes;Code Smell;1
Nested blocks of code should not be left empty;Code Smell;Null pointers should not be dereferenced;Code Smell;1
@Deprecated code should not be used;Code Smell;Boolean expressions should not be gratuitous;Code Smell;1
Cyclically-dependent Modularization;Design Smell;Methods should not be empty;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;1
Classes from sun.* packages should not be used;Code Smell;Sections of code should not be commented out;Code Smell;1
Track uses of TODO tags;Code Smell;Utility classes should not have public constructors;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Try-catch blocks should not be nested;Code Smell;1
Empty arrays and collections should be returned instead of null;Code Smell;Unnecessary imports should be removed;Code Smell;1
Nested blocks of code should not be left empty;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;1
Insufficient Modularization;Design Smell;Try-catch blocks should not be nested;Code Smell;1
Collection.isEmpty() should be used to test for emptiness;Code Smell;Conditionally executed blocks should be reachable;Code Smell;1
Insufficient Modularization;Design Smell;private methods called only by inner classes should be moved to those classes;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;Unnecessary imports should be removed;Code Smell;1
Classes should not be compared by name;Code Smell;Track uses of TODO tags;Code Smell;1
Anonymous inner classes containing only one method should become lambdas;Code Smell;Exceptions should be either logged or rethrown but not both;Code Smell;1
Ternary operators should not be nested;Code Smell;Unused private fields should be removed;Code Smell;1
@Deprecated code should not be used;Code Smell;Synchronized classes Vector  Hashtable  Stack and StringBuffer should not be used;Code Smell;1
Methods should not be empty;Code Smell;Null pointers should not be dereferenced;Code Smell;1
Loops should not contain more than a single break or continue statement;Code Smell;Private fields only used as local variables in methods should become local variables;Code Smell;1
Fields in a Serializable class should either be transient or serializable;Code Smell;Modifiers should be declared in the correct order;Code Smell;1
Map.get and value test should be replaced with single method call;Code Smell;Maps with keys that are enum values should be replaced with EnumMap;Code Smell;1
Boolean literals should not be redundant;Code Smell;Try-catch blocks should not be nested;Code Smell;1
Local variables should not be declared and then immediately returned or thrown;Code Smell;Type parameter names should comply with a naming convention;Code Smell;1
Boxed Boolean should be avoided in boolean expressions;Code Smell;Strings should not be concatenated using '+' in a loop;Code Smell;1
Boolean literals should not be redundant;Code Smell;Strings and Boxed types should be compared using equals();Code Smell;1
Deprecated elements should have both the annotation and the Javadoc tag;Code Smell;Unnecessary Abstraction;Design Smell;1
Deficient Encapsulation;Design Smell;Non-primitive fields should not be volatile;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;String literals should not be duplicated;Code Smell;1
@Deprecated code should not be used;Code Smell;Null pointers should not be dereferenced;Code Smell;1
Boolean literals should not be redundant;Code Smell;Null pointers should not be dereferenced;Code Smell;1
Conditionally executed blocks should be reachable;Code Smell;switch statements should have default clauses;Code Smell;1
Changing or bypassing accessibility is security-sensitive;Code Smell;Null checks should not be used with instanceof;Code Smell;1
Classes from sun.* packages should not be used;Code Smell;static base class members should not be accessed via derived types;Code Smell;1
Constructors should not be used to instantiate String  BigInteger  BigDecimal and primitive-wrapper classes;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
Boolean expressions should not be gratuitous;Code Smell;Deficient Encapsulation;Design Smell;1
Type parameter names should comply with a naming convention;Code Smell;Utility classes should not have public constructors;Code Smell;1
Source files should not have any duplicated blocks;Code Smell;write(byte[] int int) should be overridden;Code Smell;1
@Deprecated code should not be used;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Methods should not be empty;Code Smell;Try-catch blocks should not be nested;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Subclasses that add fields should override equals;Code Smell;1
@Deprecated code should not be used;Code Smell;Collection.isEmpty() should be used to test for emptiness;Code Smell;1
StandardCharsets constants should be preferred;Code Smell;String literals should not be duplicated;Code Smell;1
Boolean literals should not be redundant;Code Smell;Unused method parameters should be removed;Code Smell;1
Assignments should not be redundant;Code Smell;Source files should not have any duplicated blocks;Code Smell;1
Two branches in a conditional structure should not have exactly the same implementation;Code Smell;Utility classes should not have public constructors;Code Smell;1
Synchronized classes Vector  Hashtable  Stack and StringBuffer should not be used;Code Smell;Unused method parameters should be removed;Code Smell;1
Redundant pairs of parentheses should be removed;Code Smell;Unnecessary imports should be removed;Code Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Printf-style format strings should not lead to unexpected behavior at runtime;Code Smell;1
Empty arrays and collections should be returned instead of null;Code Smell;InterruptedException should not be ignored;Code Smell;1
Insufficient Modularization;Design Smell;clone should not be overridden;Code Smell;1
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;Unused private methods should be removed;Code Smell;1
Classes from sun.* packages should not be used;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Collapsible if statements should be merged;Code Smell;Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;1
Iterator.next() methods should throw NoSuchElementException;Code Smell;Unnecessary imports should be removed;Code Smell;1
Constant names should comply with a naming convention;Code Smell;Printf-style format strings should be used correctly;Code Smell;1
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;entrySet() should be iterated when both the key and value are needed;Code Smell;1
Child class fields should not shadow parent class fields;Code Smell;Loops should not contain more than a single break or continue statement;Code Smell;1
Feature Concentration;Architectural Smell;Iterator.next() methods should throw NoSuchElementException;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Changing or bypassing accessibility is security-sensitive;Code Smell;1
Methods should not have too many parameters;Code Smell;Utility classes should not have public constructors;Code Smell;1
Exceptions should be either logged or rethrown but not both;Code Smell;Printf-style format strings should be used correctly;Code Smell;1
@Override should be used on overriding and implementing methods;Code Smell;Local variables should not shadow class fields;Code Smell;1
Modifiers should be declared in the correct order;Code Smell;ThreadLocal.withInitial should be preferred;Code Smell;1
Nested blocks of code should not be left empty;Code Smell;public static fields should be constant;Code Smell;1
Return of boolean expressions should not be wrapped into an if-then-else statement;Code Smell;Wide Hierarchy;Design Smell;1
Cognitive Complexity of methods should not be too high;Code Smell;Loggers should be named for their enclosing classes;Code Smell;1
Methods should not be empty;Code Smell;Preconditions and logging arguments should not require evaluation;Code Smell;1
Null pointers should not be dereferenced;Code Smell;Redundant casts should not be used;Code Smell;1
Insufficient Modularization;Design Smell;Methods and field names should not be the same or differ only by capitalization;Code Smell;1
Broken Hierarchy;Design Smell;String literals should not be duplicated;Code Smell;1
